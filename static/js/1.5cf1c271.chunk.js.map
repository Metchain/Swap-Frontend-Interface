{"version":3,"sources":["nft/components/collection/Card.tsx","nft/css/loading.css.ts","nft/utils/tokenRoutes.ts","nft/hooks/useTokenInput.ts","nft/hooks/usePayWithAnyTokenSwap.ts","nft/hooks/usePriceImpact.ts","nft/components/bag/BagFooter.tsx","nft/hooks/useDerivedPayWithAnyTokenSwapInfo.ts","nft/hooks/usePermit2Approval.ts","nft/utils/nftRoute.ts","nft/components/bag/TimedLoader.tsx","nft/components/bag/BagRow.css.ts","nft/components/bag/BagRow.tsx","nft/components/bag/BagContent.tsx","nft/components/bag/BagHeader.tsx","nft/components/bag/EmptyContent.tsx","nft/components/bag/profile/ProfileAssetRow.tsx","nft/components/bag/profile/ProfileBagContent.tsx","nft/components/bag/Bag.tsx","nft/components/bag/Bag.css.ts"],"names":["AssetMediaType","CardContext","createContext","undefined","BORDER_RADIUS","useCardContext","context","useContext","Error","useNotForSale","asset","useMemo","notForSale","BigNumber","from","priceInfo","ETHPrice","lt","useAssetMediaType","assetMediaType","Image","animationUrl","isAudio","Audio","isVideo","Video","baseHref","address","tokenId","asset_contract","DetailsLinkContainer","styled","a","theme","accentAction","accentActionSoft","OpacityHoverState","SuspiciousIcon","AlertTriangle","accentFailure","RankingContainer","div","backgroundOutline","ThemedText","HeadlineSmall","backgroundBackdrop","backgroundInteractive","textPrimary","StyledImageContainer","isDisabled","opacity","disabled","enabled","CardContainer","backgroundSurface","selected","opacify","colors","gray500","Container","addAssetToBag","removeAssetFromBag","children","onClick","useReducer","s","hovered","toggleHovered","useState","href","setHref","providerValue","assetRef","useRef","useLayoutEffect","current","matches","toggleHover","useCallback","Provider","value","ref","draggable","onMouseEnter","onMouseLeave","e","preventDefault","ImageContainer","handleUniformAspectRatio","uniformAspectRatio","setUniformAspectRatio","renderedHeight","setRenderedHeight","UniformAspectRatios","square","height","currentTarget","clientHeight","aspectRatio","clientWidth","unset","getHeightFromAspectRatio","getMediaAspectRatio","StyledMediaContainer","Row","StyledImage","img","$aspectRatio","transition","duration","medium","timing","ease","$hidden","imageLoading","smallImageUrl","imageUrl","noContent","setNoContent","loaded","setLoaded","isMobile","useIsMobile","NoContentContainer","src","onError","onLoad","PlaybackButton","StyledVideo","video","StyledInnerMediaContainer","shouldPlay","setCurrentTokenPlayingMedia","vidRef","imageLoaded","setImageLoaded","play","pause","alt","name","size","stopPropagation","onEnded","loop","playsInline","StyledAudio","audio","audRef","width","StyledDetailsContainer","Column","DetailsContainer","StyledInfoContainer","InfoContainer","TruncatedTextRow","BodySmall","AssetNameRow","PrimaryRowContainer","FloorPriceRow","ProfileNftDetails","hideDetails","shouldShowUserListedPrice","tokenType","NftStandard","Erc1155","PrimaryRow","PrimaryDetails","color","collectionIsVerified","DetailsLink","assetName","susFlag","Suspicious","floor_sell_order_price","floorFormatter","StyledPrimaryRow","StyledPrimaryDetails","PrimaryInfoContainer","PrimaryInfo","StyledSecondaryRow","SecondaryRow","StyledSecondaryDetails","SecondaryDetails","SecondaryInfoContainer","SecondaryInfo","StyledMarketplaceIcon","textSecondary","MarketplaceIcon","marketplace","RarityLogoContainer","RarityText","RarityInfo","Ranking","rarity","provider","rarityVerified","rarityLogo","rank","text","collectionName","primaryProvider","fallbackProvider","placement","padding","putCommas","SUSPICIOUS_TEXT","SuspiciousIconContainer","PoolIconContainer","Pool","NoContentContainerBackground","NoContentText","BodyPrimary","loadingBlock","loadingAsset","buildTradeRouteInput","swap","inputAmount","amount","swapAmounts","outputAmount","quotient","toString","token","currency","isToken","chainId","decimals","isNative","pools","route","map","pool","isPool","pair","tokenAmountA","reserve0","token0","tokenAmountB","reserve1","token1","fee","liquidity","sqrtRatioX96","tickCurrent","tokenA","tokenB","buildPool","useTokenInput","create","devtools","set","inputCurrency","tokenTradeInput","setInputCurrency","clearInputCurrency","setTokenTradeInput","usePayWithAnyTokenSwap","trade","allowance","allowedSlippage","state","hasRoutes","routes","hasInputAmount","hasAllowance","useEffect","slippage","parseInt","multiply","toSignificant","mixedTokenTradeRouteInputs","v2TokenTradeRouteInputs","v3TokenTradeRouteInputs","swaps","protocol","Protocol","MIXED","push","V2","length","buildAllTradeRouteInputs","mixedRoutes","tradeType","TokenTradeType","ExactOutput","v2Routes","v3Routes","permitInput","permitSignature","details","expiration","nonce","sigDeadline","signature","spender","permit","slippageToleranceBasisPoints","tokenAmount","usePriceImpact","useTheme","marketPriceImpact","computeRealizedPriceImpact","priceImpactWarning","getPriceImpactWarning","warningColor","accentCritical","accentWarning","priceImpactSeverity","type","displayPercentage","priceImpact","sign","lessThan","Number","numerator","denominator","number","parseFloat","toFixed","toHumanReadablePercent","FooterContainer","Footer","FooterHeader","usingPayWithAnyToken","CurrencyRow","TotalColumn","WarningIcon","WarningText","$color","HelperText","Caption","CurrencyInput","PayButton","button","$backgroundColor","FiatLoadingBubble","LoadingBubble","PriceImpactContainer","PriceImpactRow","ValueText","ActionButton","backgroundColor","textColor","Warning","fontSize","lineHeight","Helper","InputCurrencyValue","totalEthPrice","activeCurrency","tradeState","TradeState","LOADING","fontWeight","SYNCING","ethNumberStandardFormatter","toExact","formatWeiToDecimal","symbol","FiatValue","usdcValue","style","INVALID","NO_ROUTE_FOUND","PENDING_BAG_STATUSES","BagStatus","FETCHING_ROUTE","CONFIRMING_IN_WALLET","FETCHING_FINAL_ROUTE","PROCESSING_TRANSACTION","BagFooter","fetchAssets","eventProperties","toggleWalletModal","useToggleWalletModal","useWeb3React","account","connector","connected","Boolean","shouldUsePayWithAnyToken","usePayWithAnyTokenEnabled","defaultCurrency","useCurrency","inputCurrencyBalance","useTokenBalance","useBag","isLocked","bagStatus","setBagExpanded","setBagStatus","shallow","bagIsLocked","tokenSelectorOpen","setTokenSelectorOpen","isPending","includes","SupportedChainId","MAINNET","parsedOutputAmount","tryParseCurrencyAmount","formatEther","useBestTrade","TradeType","EXACT_OUTPUT","useAutoSlippageTolerance","maximumAmountIn","useDerivedPayWithAnyTokenSwapInfo","maximumAmount","usePermit2Allowance","UNIVERSAL_ROUTER_ADDRESS","isApprovalLoading","AllowanceState","REQUIRED","isAllowancePending","setIsAllowancePending","updateAllowance","invariant","approveAndPermit","sendAnalyticsEvent","InterfaceEventName","APPROVE_TOKEN_TXN_SUBMITTED","chain_id","token_symbol","token_address","console","error","usePermit2Approval","fiatValueTradeInput","useStablecoinValue","fiatValueTradeOutput","balanceInEth","useWalletBalance","balance","sufficientBalance","parseEther","gte","ADDING_TO_BAG","handleClick","buttonText","warningText","warningTextColor","helperText","helperTextColor","buttonColor","buttonTextColor","accentTextLightPrimary","switchChain","WARNING","VALID","CONFIRM_QUOTE","bagExpanded","traceEventProperties","usd_value","using_erc20","log","gap","SubHeaderSmall","NFTEventName","NFT_BUY_TOKEN_SELECTOR_CLICKED","CurrencyLogo","marginBottom","justify","events","BrowserEvent","NFT_BUY_BAG_PAY","element","InterfaceElementName","NFT_BUY_BAG_PAY_BUTTON","properties","shouldLogImpression","Loader","stroke","CurrencySearchModal","isOpen","onDismiss","onCurrencySelect","NFT_BUY_TOKEN_SELECTED","selectedCurrency","onlyShowCurrenciesWithBalance","buildRoutingItem","routingItem","action","RoutingActions","Buy","toLowerCase","amountIn","price","assetIn","baseAsset","basePrice","baseDecimals","amountOut","assetOut","id","contractAddress","orderSource","buildRouteResponse","routeResponse","useErc20Token","valueToSend","sendAmount","data","calldata","to","toAddress","dash","keyframes","Circle","circle","TimedLoader","Box","display","position","strokeWidth","strokeLinecap","transform","transformOrigin","fill","r","cx","cy","bagRow","bagRowImage","grayscaleImage","icon","RemoveButton","ThemeButton","ReviewButton","RemoveAssetOverlay","RemoveAssetButton","background","className","styles","textAlign","left","top","BagRow","usdPrice","removeAsset","showRemove","grayscale","loadedImage","noImageAvailable","setNoImageAvailable","cardHovered","setCardHovered","handleMouseEnter","handleMouseLeave","showRemoveButton","assetEthPrice","updatedPriceInfo","assetEthPriceFormatted","assetUSDPriceFormatted","handleRemoveClick","getAssetHref","textDecoration","as","clsx","visibility","overflow","whiteSpace","emphasis","ButtonEmphasis","ButtonSize","flexShrink","alignItems","PriceChangeBagRow","markAssetAsReviewed","isPriceIncrease","gt","handleRemove","handleKeep","borderTopColor","marginLeft","marginRight","justifyContent","small","high","UnavailableAssetsPreview","assets","gridTemplateColumns","index","borderStyle","borderWidth","borderColor","borderRadius","zIndex","UnavailableAssetsHeaderRow","clearUnavailableAssets","didOpenUnavailableAssets","setDidOpenUnavailableAssets","toggleOpen","timeLeft","setTimeLeft","intervalId","setInterval","clearInterval","moreThanOneUnavailable","isShowingAssets","cursor","bodySmall","slice","BagContent","uncheckedItemsInBag","itemsInBag","setItemsInBag","removeAssetsFromBag","recalculateBagUsingPooledAssets","fetchedPriceData","useQuery","fetchPrice","unchangedAssets","filter","item","status","BagItemStatus","ADDED_TO_BAG","REVIEWED","priceChangedAssets","REVIEWING_PRICE_CHANGE","unavailableAssets","UNAVAILABLE","availableItems","hasAssetsInReview","hasAssets","NFT_BUY_BAG_CHANGED","bag_quantity","formatAssetEventProperties","IN_REVIEW","CONFIRM_REVIEW","reverse","ClearButton","ButtonText","IconWrapper","CounterDot","sizing","Wrapper","BagHeader","numberOfAssets","closeBag","resetFlow","isProfilePage","numberOfCharacters","getCircleSizing","StyledColumn","EmptyState","useIsNftProfilePage","themeVars","textTertiary","subhead","ProfileAssetRow","useSellAsset","removeSellAsset","setHovered","handleHover","handleRemoveAsset","ProfileBagContent","sellAssets","BAG_WIDTH","XXXL_BAG_WIDTH","BagContainer","shallowShadow","raiseZIndex","Z_INDEX","modalOverTooltip","modalBackdrop","breakpoint","sm","xxxl","DetailsPageBackground","ContinueButton","hover","ScrollingIndicator","show","marginX","borderBottomColor","Bag","resetSellAssets","reset","setProfilePageState","useProfilePageState","setLocked","toggleBag","setTotalEthPrice","isDetailsPage","useIsNftDetailsPage","isNFTPage","useIsNftPage","usingGqlRouting","useGqlRoutingFlag","GqlRoutingVariant","Enabled","sendTransaction","useSendTransaction","transactionState","setTransactionState","setState","transactionStateRef","useTransactionResponse","setTransactionResponse","queryClient","useQueryClient","isModalOpen","setModalIsOpen","userCanScroll","setUserCanScroll","scrollProgress","setScrollProgress","reduce","total","add","purchaseAssets","routingData","purchasingWithErc20","getSigner","purchaseResponse","TxStateType","Success","Failed","handleCloseBag","manualClose","useNftRouteLazyQuery","fetchGqlRoute","itemsToBuy","ethSellObject","buildSellObject","ethTotal","variables","senderAddress","nftTrades","buildNftTradeInputFromBagItems","tokenTrades","onCompleted","nftRoute","combineBuyItemsWithTxRoute","hasPriceAdjustment","updatedAssets","shouldRefetchCalldata","fetchedPriceChangedAssets","sort","sortUpdatedAssets","fetchedUnavailableAssets","isUnavailable","fetchedUnchangedAssets","hasReviewedAssets","hasUnavailableAssets","shouldReview","unavailableAsset","changedAsset","unchangedAsset","shouldLock","fetchQuery","fetchRoute","toSell","toBuy","routeData","subscribe","Confirming","Denied","Invalid","New","hasAssetsToShow","isBuyingAssets","isSellingAssets","shouldRenderEmptyState","Portal","node","canScroll","scrollHeight","onScroll","event","scrollTop","containerHeight","ProfilePageStateType","LISTING","NFT_PROFILE_PAGE_START_SELL","list_quantity","collection_addresses","token_ids","Overlay"],"mappings":"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","file":"static/js/1.5cf1c271.chunk.js","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport { t, Trans } from '@lingui/macro'\nimport Column from 'components/Column'\nimport { OpacityHoverState } from 'components/Common'\nimport Row from 'components/Row'\nimport { MouseoverTooltip } from 'components/Tooltip'\nimport { NftStandard } from 'graphql/data/__generated__/types-and-hooks'\nimport {\n  MinusIconLarge,\n  PauseButtonIcon,\n  PlayButtonIcon,\n  PlusIconLarge,\n  PoolIcon,\n  RarityVerifiedIcon,\n  VerifiedIcon,\n} from 'nft/components/icons'\nimport { useIsMobile } from 'nft/hooks'\nimport { GenieAsset, Rarity, UniformAspectRatio, UniformAspectRatios, WalletAsset } from 'nft/types'\nimport { fallbackProvider, isAudio, isVideo, putCommas } from 'nft/utils'\nimport { floorFormatter } from 'nft/utils/numbers'\nimport {\n  createContext,\n  MouseEvent,\n  ReactNode,\n  useCallback,\n  useContext,\n  useLayoutEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from 'react'\nimport { AlertTriangle, Pause, Play } from 'react-feather'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\nimport { colors } from 'theme/colors'\nimport { opacify } from 'theme/utils'\n\n/* -------- ASSET CONTEXT -------- */\nexport interface CardContextProps {\n  asset: GenieAsset | WalletAsset\n  hovered: boolean\n  selected: boolean\n  href: string\n  setHref: (href: string) => void\n  addAssetToBag: () => void\n  removeAssetFromBag: () => void\n}\n\nconst CardContext = createContext<CardContextProps | undefined>(undefined)\n\nconst BORDER_RADIUS = '12'\n\nconst useCardContext = () => {\n  const context = useContext(CardContext)\n  if (!context) throw new Error('Must use context inside of provider')\n  return context\n}\n\nexport enum AssetMediaType {\n  Image,\n  Video,\n  Audio,\n}\n\nconst useNotForSale = (asset: GenieAsset) =>\n  useMemo(() => {\n    let notForSale = true\n    notForSale = asset.notForSale || BigNumber.from(asset.priceInfo ? asset.priceInfo.ETHPrice : 0).lt(0)\n    return notForSale\n  }, [asset])\n\nconst useAssetMediaType = (asset: GenieAsset | WalletAsset) =>\n  useMemo(() => {\n    let assetMediaType = AssetMediaType.Image\n    if (asset.animationUrl) {\n      if (isAudio(asset.animationUrl)) {\n        assetMediaType = AssetMediaType.Audio\n      } else if (isVideo(asset.animationUrl)) {\n        assetMediaType = AssetMediaType.Video\n      }\n    }\n    return assetMediaType\n  }, [asset])\n\nconst baseHref = (asset: GenieAsset | WalletAsset) => {\n  if ('address' in asset) return `/#/nfts/asset/${asset.address}/${asset.tokenId}?origin=collection`\n  if ('asset_contract' in asset) return `/#/nfts/asset/${asset.asset_contract.address}/${asset.tokenId}?origin=profile`\n  return '/#/nfts/profile'\n}\n\nconst DetailsLinkContainer = styled.a`\n  display: flex;\n  align-items: center;\n  flex-shrink: 0;\n  text-decoration: none;\n  font-size: 14px;\n  font-weight: 500;\n  border: 1px solid;\n  color: ${({ theme }) => theme.accentAction};\n  border-color: ${({ theme }) => theme.accentActionSoft};\n  padding: 2px 6px;\n  border-radius: 6px;\n  ${OpacityHoverState};\n`\n\nconst SuspiciousIcon = styled(AlertTriangle)`\n  width: 16px;\n  height: 16px;\n  color: ${({ theme }) => theme.accentFailure};\n`\n\nconst Erc1155ControlsRow = styled.div`\n  position: absolute;\n  display: flex;\n  width: 100%;\n  bottom: 12px;\n  z-index: 2;\n  justify-content: center;\n`\n\nconst Erc1155ControlsContainer = styled.div`\n  display: flex;\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  border-radius: ${BORDER_RADIUS}px;\n  overflow: hidden;\n`\n\nconst Erc1155ControlsDisplay = styled(ThemedText.HeadlineSmall)`\n  display: flex;\n  padding: 6px 8px;\n  width: 60px;\n  background: ${({ theme }) => theme.backgroundBackdrop};\n  justify-content: center;\n  cursor: default;\n`\n\nconst Erc1155ControlsInput = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 40px;\n  background: ${({ theme }) => theme.backgroundInteractive};\n  color: ${({ theme }) => theme.textPrimary};\n\n  :hover {\n    color: ${({ theme }) => theme.accentAction};\n  }\n`\n\nconst RankingContainer = styled.div`\n  position: absolute;\n  top: 12px;\n  left: 12px;\n  z-index: 2;\n`\n\nconst StyledImageContainer = styled.div<{ isDisabled?: boolean }>`\n  position: relative;\n  pointer-events: auto;\n  &:hover {\n    opacity: ${({ isDisabled, theme }) => (isDisabled ? theme.opacity.disabled : theme.opacity.enabled)};\n  }\n  cursor: ${({ isDisabled }) => (isDisabled ? 'default' : 'pointer')};\n`\n\nconst CardContainer = styled.div<{ selected: boolean }>`\n  position: relative;\n  border-radius: ${BORDER_RADIUS}px;\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  overflow: hidden;\n  padding-bottom: 12px;\n  border-radius: 16px;\n  box-shadow: rgba(0, 0, 0, 10%) 0px 4px 12px;\n  box-sizing: border-box;\n  -webkit-box-sizing: border-box;\n\n  :after {\n    content: '';\n    position: absolute;\n    top: 0px;\n    right: 0px;\n    bottom: 0px;\n    left: 0px;\n    border: ${({ selected }) => (selected ? '2px' : '1px')} solid;\n    border-radius: 16px;\n    border-color: ${({ theme, selected }) => (selected ? theme.accentAction : opacify(12, colors.gray500))};\n    pointer-events: none;\n  }\n`\n\n/* -------- ASSET CARD -------- */\ninterface CardProps {\n  asset: GenieAsset | WalletAsset\n  selected: boolean\n  addAssetToBag: () => void\n  removeAssetFromBag: () => void\n  children: ReactNode\n  isDisabled?: boolean\n  onClick?: () => void\n}\n\nconst Container = ({\n  asset,\n  selected,\n  addAssetToBag,\n  removeAssetFromBag,\n  children,\n  isDisabled,\n  onClick,\n}: CardProps) => {\n  const [hovered, toggleHovered] = useReducer((s) => !s, false)\n  const [href, setHref] = useState(baseHref(asset))\n\n  const providerValue = useMemo(\n    () => ({\n      asset,\n      selected,\n      hovered,\n      toggleHovered,\n      href,\n      setHref,\n      addAssetToBag,\n      removeAssetFromBag,\n    }),\n    [asset, hovered, selected, href, addAssetToBag, removeAssetFromBag]\n  )\n\n  const assetRef = useRef<HTMLDivElement>(null)\n\n  useLayoutEffect(() => {\n    if (hovered && assetRef.current?.matches(':hover') === false) toggleHovered()\n  }, [hovered])\n\n  const handleAssetInBag = (e: MouseEvent) => {\n    if (!asset.notForSale) {\n      e.preventDefault()\n      !selected ? addAssetToBag() : removeAssetFromBag()\n    }\n  }\n\n  const toggleHover = useCallback(() => toggleHovered(), [])\n\n  return (\n    <CardContext.Provider value={providerValue}>\n      <CardContainer\n        selected={selected}\n        ref={assetRef}\n        draggable={false}\n        onMouseEnter={toggleHover}\n        onMouseLeave={toggleHover}\n        onClick={isDisabled ? () => null : onClick ?? handleAssetInBag}\n      >\n        {children}\n      </CardContainer>\n    </CardContext.Provider>\n  )\n}\n\nconst ImageContainer = ({ children, isDisabled = false }: { children: ReactNode; isDisabled?: boolean }) => (\n  <StyledImageContainer isDisabled={isDisabled}>{children}</StyledImageContainer>\n)\n\nconst handleUniformAspectRatio = (\n  uniformAspectRatio: UniformAspectRatio,\n  e: React.SyntheticEvent<HTMLElement, Event>,\n  setUniformAspectRatio?: (uniformAspectRatio: UniformAspectRatio) => void,\n  renderedHeight?: number,\n  setRenderedHeight?: (renderedHeight: number | undefined) => void\n) => {\n  if (uniformAspectRatio !== UniformAspectRatios.square && setUniformAspectRatio) {\n    const height = e.currentTarget.clientHeight\n    const width = e.currentTarget.clientWidth\n    const aspectRatio = width / height\n\n    if (\n      (!renderedHeight || renderedHeight !== height) &&\n      aspectRatio < 1 &&\n      uniformAspectRatio !== UniformAspectRatios.square &&\n      setRenderedHeight\n    ) {\n      setRenderedHeight(height)\n    }\n\n    if (uniformAspectRatio === UniformAspectRatios.unset) {\n      setUniformAspectRatio(aspectRatio >= 1 ? UniformAspectRatios.square : aspectRatio)\n    } else if (uniformAspectRatio !== aspectRatio) {\n      setUniformAspectRatio(UniformAspectRatios.square)\n      setRenderedHeight && setRenderedHeight(undefined)\n    }\n  }\n}\n\nfunction getHeightFromAspectRatio(uniformAspectRatio: UniformAspectRatio, renderedHeight?: number): number | undefined {\n  return uniformAspectRatio === UniformAspectRatios.square || uniformAspectRatio === UniformAspectRatios.unset\n    ? undefined\n    : renderedHeight\n}\n\nfunction getMediaAspectRatio(\n  uniformAspectRatio?: UniformAspectRatio,\n  setUniformAspectRatio?: (uniformAspectRatio: UniformAspectRatio) => void\n): string {\n  return uniformAspectRatio === UniformAspectRatios.square || !setUniformAspectRatio ? '1' : 'auto'\n}\n\ninterface ImageProps {\n  uniformAspectRatio?: UniformAspectRatio\n  setUniformAspectRatio?: (uniformAspectRatio: UniformAspectRatio) => void\n  renderedHeight?: number\n  setRenderedHeight?: (renderedHeight: number | undefined) => void\n}\n\nconst StyledMediaContainer = styled(Row)`\n  overflow: hidden;\n  border-top-left-radius: ${BORDER_RADIUS}px;\n  border-top-right-radius: ${BORDER_RADIUS}px;\n`\n\nconst StyledImage = styled.img<{\n  hovered: boolean\n  imageLoading: boolean\n  $aspectRatio?: string\n  $hidden?: boolean\n}>`\n  width: 100%;\n  aspect-ratio: ${({ $aspectRatio }) => $aspectRatio};\n  transition: ${({ theme }) => `${theme.transition.duration.medium} ${theme.transition.timing.ease} transform`};\n  will-change: transform;\n  object-fit: contain;\n  visibility: ${({ $hidden }) => ($hidden ? 'hidden' : 'visible')};\n  transform: ${({ hovered }) => hovered && 'scale(1.15)'};\n  background: ${({ theme, imageLoading }) =>\n    imageLoading && `linear-gradient(270deg, ${theme.backgroundOutline} 0%, ${theme.backgroundSurface} 100%)`};\n`\n\nconst Image = ({\n  uniformAspectRatio = UniformAspectRatios.square,\n  setUniformAspectRatio,\n  renderedHeight,\n  setRenderedHeight,\n}: ImageProps) => {\n  const { hovered, asset } = useCardContext()\n  const [noContent, setNoContent] = useState(!asset.smallImageUrl && !asset.imageUrl)\n  const [loaded, setLoaded] = useState(false)\n  const isMobile = useIsMobile()\n\n  if (noContent) {\n    return <NoContentContainer height={getHeightFromAspectRatio(uniformAspectRatio, renderedHeight)} />\n  }\n\n  return (\n    <StyledMediaContainer>\n      <StyledImage\n        src={asset.imageUrl || asset.smallImageUrl}\n        $aspectRatio={getMediaAspectRatio(uniformAspectRatio, setUniformAspectRatio)}\n        hovered={hovered && !isMobile}\n        imageLoading={!loaded}\n        draggable={false}\n        onError={() => setNoContent(true)}\n        onLoad={(e) => {\n          handleUniformAspectRatio(uniformAspectRatio, e, setUniformAspectRatio, renderedHeight, setRenderedHeight)\n          setLoaded(true)\n        }}\n      />\n    </StyledMediaContainer>\n  )\n}\n\ninterface MediaProps {\n  shouldPlay: boolean\n  setCurrentTokenPlayingMedia: (tokenId: string | undefined) => void\n}\n\nconst PlaybackButton = styled.div`\n  position: absolute;\n  height: 40px;\n  width: 40px;\n  z-index: 1;\n  margin-left: calc(100% - 50px);\n  transform: translateY(-56px);\n`\n\nconst StyledVideo = styled.video<{\n  $aspectRatio?: string\n}>`\n  width: 100%;\n  aspect-ratio: ${({ $aspectRatio }) => $aspectRatio};\n`\n\nconst StyledInnerMediaContainer = styled(Row)`\n  position: absolute;\n  left: 0px;\n  top: 0px;\n`\n\nconst Video = ({\n  uniformAspectRatio = UniformAspectRatios.square,\n  setUniformAspectRatio,\n  renderedHeight,\n  setRenderedHeight,\n  shouldPlay,\n  setCurrentTokenPlayingMedia,\n}: MediaProps & ImageProps) => {\n  const vidRef = useRef<HTMLVideoElement>(null)\n  const { hovered, asset } = useCardContext()\n  const [noContent, setNoContent] = useState(!asset.smallImageUrl && !asset.imageUrl)\n  const [imageLoaded, setImageLoaded] = useState(false)\n  const isMobile = useIsMobile()\n\n  if (shouldPlay) {\n    vidRef.current?.play()\n  } else {\n    vidRef.current?.pause()\n  }\n\n  if (noContent) {\n    return <NoContentContainer height={getHeightFromAspectRatio(uniformAspectRatio, renderedHeight)} />\n  }\n\n  return (\n    <>\n      <StyledMediaContainer>\n        <StyledImage\n          src={asset.imageUrl || asset.smallImageUrl}\n          alt={asset.name || asset.tokenId}\n          $aspectRatio={getMediaAspectRatio(uniformAspectRatio, setUniformAspectRatio)}\n          hovered={hovered && !isMobile}\n          imageLoading={!imageLoaded}\n          draggable={false}\n          onError={() => setNoContent(true)}\n          onLoad={(e) => {\n            handleUniformAspectRatio(uniformAspectRatio, e, setUniformAspectRatio, renderedHeight, setRenderedHeight)\n            setImageLoaded(true)\n          }}\n          $hidden={shouldPlay}\n        />\n      </StyledMediaContainer>\n      {shouldPlay ? (\n        <>\n          <PlaybackButton>\n            <Pause\n              size=\"24px\"\n              onClick={(e) => {\n                e.preventDefault()\n                e.stopPropagation()\n                setCurrentTokenPlayingMedia(undefined)\n              }}\n            />\n          </PlaybackButton>\n          <StyledInnerMediaContainer>\n            <StyledVideo\n              $aspectRatio={getMediaAspectRatio(uniformAspectRatio, setUniformAspectRatio)}\n              ref={vidRef}\n              onEnded={(e) => {\n                e.preventDefault()\n                setCurrentTokenPlayingMedia(undefined)\n              }}\n              loop\n              playsInline\n            >\n              <source src={asset.animationUrl} />\n            </StyledVideo>\n          </StyledInnerMediaContainer>\n        </>\n      ) : (\n        <PlaybackButton>\n          {((!isMobile && hovered) || isMobile) && (\n            <Play\n              size=\"24px\"\n              onClick={(e) => {\n                e.preventDefault()\n                e.stopPropagation()\n                setCurrentTokenPlayingMedia(asset.tokenId)\n              }}\n            />\n          )}\n        </PlaybackButton>\n      )}\n    </>\n  )\n}\n\nconst StyledAudio = styled.audio`\n  width: 100%;\n  height: 100%;\n`\n\nconst Audio = ({\n  uniformAspectRatio = UniformAspectRatios.square,\n  setUniformAspectRatio,\n  renderedHeight,\n  setRenderedHeight,\n  shouldPlay,\n  setCurrentTokenPlayingMedia,\n}: MediaProps & ImageProps) => {\n  const audRef = useRef<HTMLAudioElement>(null)\n  const { hovered, asset } = useCardContext()\n  const [noContent, setNoContent] = useState(!asset.smallImageUrl && !asset.imageUrl)\n  const [imageLoaded, setImageLoaded] = useState(false)\n  const isMobile = useIsMobile()\n\n  if (shouldPlay) {\n    audRef.current?.play()\n  } else {\n    audRef.current?.pause()\n  }\n\n  if (noContent) {\n    return <NoContentContainer height={getHeightFromAspectRatio(uniformAspectRatio, renderedHeight)} />\n  }\n\n  return (\n    <>\n      <StyledMediaContainer>\n        <StyledImage\n          src={asset.imageUrl || asset.smallImageUrl}\n          alt={asset.name || asset.tokenId}\n          $aspectRatio={getMediaAspectRatio(uniformAspectRatio, setUniformAspectRatio)}\n          hovered={hovered && !isMobile}\n          imageLoading={!imageLoaded}\n          draggable={false}\n          onError={() => setNoContent(true)}\n          onLoad={(e) => {\n            handleUniformAspectRatio(uniformAspectRatio, e, setUniformAspectRatio, renderedHeight, setRenderedHeight)\n            setImageLoaded(true)\n            setImageLoaded(true)\n          }}\n        />\n      </StyledMediaContainer>\n      {shouldPlay ? (\n        <>\n          <PlaybackButton>\n            <PauseButtonIcon\n              width=\"100%\"\n              height=\"100%\"\n              onClick={(e) => {\n                e.preventDefault()\n                e.stopPropagation()\n                setCurrentTokenPlayingMedia(undefined)\n              }}\n            />\n          </PlaybackButton>\n          <StyledInnerMediaContainer>\n            <StyledAudio\n              ref={audRef}\n              onEnded={(e) => {\n                e.preventDefault()\n                setCurrentTokenPlayingMedia(undefined)\n              }}\n            >\n              <source src={asset.animationUrl} />\n            </StyledAudio>\n          </StyledInnerMediaContainer>\n        </>\n      ) : (\n        <PlaybackButton>\n          {((!isMobile && hovered) || isMobile) && (\n            <PlayButtonIcon\n              width=\"100%\"\n              height=\"100%\"\n              onClick={(e) => {\n                e.preventDefault()\n                e.stopPropagation()\n                setCurrentTokenPlayingMedia(asset.tokenId)\n              }}\n            />\n          )}\n        </PlaybackButton>\n      )}\n    </>\n  )\n}\n\n/* -------- CARD DETAILS CONTAINER -------- */\ninterface CardDetailsContainerProps {\n  children: ReactNode\n}\n\nconst StyledDetailsContainer = styled(Column)`\n  position: relative;\n  padding: 12px 12px 0px;\n  justify-content: space-between;\n  transition: ${({ theme }) => `${theme.transition.duration.medium}`};\n`\n\nconst DetailsContainer = ({ children }: CardDetailsContainerProps) => {\n  return <StyledDetailsContainer>{children}</StyledDetailsContainer>\n}\n\nconst StyledInfoContainer = styled.div`\n  overflow: hidden;\n  width: 100%;\n`\n\nconst InfoContainer = ({ children }: { children: ReactNode }) => {\n  return <StyledInfoContainer>{children}</StyledInfoContainer>\n}\n\nconst TruncatedTextRow = styled(ThemedText.BodySmall)`\n  display: flex;\n  padding: 2px;\n  white-space: pre;\n  text-overflow: ellipsis;\n  display: block;\n  overflow: hidden;\n`\n\nconst AssetNameRow = styled(TruncatedTextRow)`\n  color: ${({ theme }) => theme.textPrimary};\n  font-size: 16px !important;\n  font-weight: 400;\n`\n\ninterface ProfileNftDetailsProps {\n  asset: WalletAsset\n  hideDetails: boolean\n}\n\nconst PrimaryRowContainer = styled.div`\n  overflow: hidden;\n  width: 100%;\n  flex-wrap: nowrap;\n`\n\nconst FloorPriceRow = styled(TruncatedTextRow)`\n  font-size: 16px;\n  font-weight: 600;\n  line-height: 20px;\n`\n\nconst ProfileNftDetails = ({ asset, hideDetails }: ProfileNftDetailsProps) => {\n  const assetName = () => {\n    if (!asset.name && !asset.tokenId) return\n    return asset.name ? asset.name : `#${asset.tokenId}`\n  }\n\n  const shouldShowUserListedPrice = !asset.notForSale && asset.asset_contract.tokenType !== NftStandard.Erc1155\n\n  return (\n    <PrimaryRowContainer>\n      <PrimaryRow>\n        <PrimaryDetails>\n          <TruncatedTextRow color=\"textSecondary\">\n            {!!asset.asset_contract.name && <span>{asset.asset_contract.name}</span>}\n          </TruncatedTextRow>\n          {asset.collectionIsVerified && <VerifiedIcon height=\"18px\" width=\"18px\" />}\n        </PrimaryDetails>\n        {!hideDetails && <DetailsLink />}\n      </PrimaryRow>\n      <Row>\n        <AssetNameRow>{assetName()}</AssetNameRow>\n        {asset.susFlag && <Suspicious />}\n      </Row>\n      <FloorPriceRow>\n        {shouldShowUserListedPrice && asset.floor_sell_order_price\n          ? `${floorFormatter(asset.floor_sell_order_price)} ETH`\n          : ' '}\n      </FloorPriceRow>\n    </PrimaryRowContainer>\n  )\n}\n\nconst StyledPrimaryRow = styled(Row)`\n  gap: 8px;\n  justify-content: space-between;\n`\n\nconst PrimaryRow = ({ children }: { children: ReactNode }) => <StyledPrimaryRow>{children}</StyledPrimaryRow>\n\nconst StyledPrimaryDetails = styled(Row)`\n  justify-items: center;\n  overflow: hidden;\n  white-space: nowrap;\n`\n\nconst PrimaryDetails = ({ children }: { children: ReactNode }) => (\n  <StyledPrimaryDetails>{children}</StyledPrimaryDetails>\n)\n\nconst PrimaryInfoContainer = styled.div`\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 24px;\n`\n\nconst PrimaryInfo = ({ children }: { children: ReactNode }) => {\n  return <PrimaryInfoContainer>{children}</PrimaryInfoContainer>\n}\n\nconst StyledSecondaryRow = styled(Row)`\n  height: 20px;\n  justify-content: space-between;\n  margin-top: 6px;\n`\n\nconst SecondaryRow = ({ children }: { children: ReactNode }) => <StyledSecondaryRow>{children}</StyledSecondaryRow>\n\nconst StyledSecondaryDetails = styled(Row)`\n  overflow: hidden;\n  white-space: nowrap;\n`\n\nconst SecondaryDetails = ({ children }: { children: ReactNode }) => (\n  <StyledSecondaryDetails>{children}</StyledSecondaryDetails>\n)\n\nconst SecondaryInfoContainer = styled.div`\n  color: ${({ theme }) => theme.textPrimary};\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  line-height: 20px;\n`\n\nconst SecondaryInfo = ({ children }: { children: ReactNode }) => {\n  return <SecondaryInfoContainer>{children}</SecondaryInfoContainer>\n}\n\nconst TertiaryInfoContainer = styled.div`\n  color: ${({ theme }) => theme.textSecondary};\n  margin-top: 8px;\n`\n\nconst TertiaryInfo = ({ children }: { children: ReactNode }) => {\n  return <TertiaryInfoContainer>{children}</TertiaryInfoContainer>\n}\n\ninterface Erc1155ControlsInterface {\n  quantity: string\n}\n\nconst Erc1155Controls = ({ quantity }: Erc1155ControlsInterface) => {\n  const { addAssetToBag, removeAssetFromBag } = useCardContext()\n\n  return (\n    <Erc1155ControlsRow>\n      <Erc1155ControlsContainer>\n        <Erc1155ControlsInput\n          onClick={(e: MouseEvent) => {\n            e.stopPropagation()\n            removeAssetFromBag()\n          }}\n        >\n          <MinusIconLarge width=\"24px\" height=\"24px\" />\n        </Erc1155ControlsInput>\n        <Erc1155ControlsDisplay>{quantity}</Erc1155ControlsDisplay>\n        <Erc1155ControlsInput\n          onClick={(e: MouseEvent) => {\n            e.stopPropagation()\n            addAssetToBag()\n          }}\n        >\n          <PlusIconLarge width=\"24px\" height=\"24px\" />\n        </Erc1155ControlsInput>\n      </Erc1155ControlsContainer>\n    </Erc1155ControlsRow>\n  )\n}\n\nconst StyledMarketplaceIcon = styled.img`\n  display: inline-block;\n  width: 16px;\n  height: 16px;\n  border-radius: 4px;\n  flex-shrink: 0;\n  margin-left: 8px;\n  vertical-align: top;\n`\n\nconst MarketplaceIcon = ({ marketplace }: { marketplace: string }) => {\n  return <StyledMarketplaceIcon alt={marketplace} src={`/nft/svgs/marketplaces/${marketplace}.svg`} />\n}\n\nconst DetailsLink = () => {\n  const { asset } = useCardContext()\n\n  return (\n    <DetailsLinkContainer\n      href={baseHref(asset)}\n      onClick={(e: MouseEvent) => {\n        e.stopPropagation()\n      }}\n    >\n      <div data-testid=\"nft-details-link\">Details</div>\n    </DetailsLinkContainer>\n  )\n}\n\n/* -------- RANKING CARD -------- */\ninterface RankingProps {\n  rarity: Rarity\n  provider: { url?: string; rank?: number }\n  rarityVerified: boolean\n  rarityLogo?: string\n}\n\nconst RarityLogoContainer = styled(Row)`\n  margin-right: 4px;\n  width: 16px;\n`\n\nconst RarityText = styled(ThemedText.BodySmall)`\n  display: flex;\n`\n\nconst RarityInfo = styled(Row)`\n  height: 16px;\n  border-radius: 4px;\n  color: ${({ theme }) => theme.textPrimary};\n  background: ${({ theme }) => theme.backgroundInteractive};\n  font-size: 10px;\n  font-weight: 600;\n  padding: 0px 4px;\n  line-height: 12px;\n  letter-spacing: 0.04em;\n  backdrop-filter: blur(6px);\n`\n\nconst Ranking = ({ rarity, provider, rarityVerified, rarityLogo }: RankingProps) => {\n  const { asset } = useCardContext()\n\n  return (\n    <>\n      {provider.rank && (\n        <RankingContainer>\n          <MouseoverTooltip\n            text={\n              <Row>\n                <RarityLogoContainer>\n                  <img src={rarityLogo} alt=\"cardLogo\" width={16} height={16} />\n                </RarityLogoContainer>\n                <RarityText>\n                  {rarityVerified\n                    ? `Verified by ${\n                        ('collectionName' in asset && asset.collectionName) ||\n                        ('asset_contract' in asset && asset.asset_contract?.name)\n                      }`\n                    : `Ranking by ${rarity.primaryProvider === 'Genie' ? fallbackProvider : rarity.primaryProvider}`}\n                </RarityText>\n              </Row>\n            }\n            placement=\"top\"\n          >\n            <RarityInfo>\n              <Row padding=\"2px 0px\">{putCommas(provider.rank)}</Row>\n              <Row>{rarityVerified ? <RarityVerifiedIcon /> : null}</Row>\n            </RarityInfo>\n          </MouseoverTooltip>\n        </RankingContainer>\n      )}\n    </>\n  )\n}\n\nconst SUSPICIOUS_TEXT = t`Blocked on OpenSea`\n\nconst SuspiciousIconContainer = styled(Row)`\n  flex-shrink: 0;\n  margin-left: 4px;\n`\n\nconst PoolIconContainer = styled(SuspiciousIconContainer)`\n  color: ${({ theme }) => theme.textSecondary};\n`\n\nconst Suspicious = () => {\n  return (\n    <MouseoverTooltip text={<ThemedText.BodySmall>{SUSPICIOUS_TEXT}</ThemedText.BodySmall>} placement=\"top\">\n      <SuspiciousIconContainer>\n        <SuspiciousIcon />\n      </SuspiciousIconContainer>\n    </MouseoverTooltip>\n  )\n}\n\nconst Pool = () => {\n  return (\n    <MouseoverTooltip\n      text={\n        <ThemedText.BodySmall>\n          This NFT is part of a liquidity pool. Buying this will increase the price of the remaining pooled NFTs.\n        </ThemedText.BodySmall>\n      }\n      placement=\"top\"\n    >\n      <PoolIconContainer>\n        <PoolIcon width=\"20\" height=\"20\" />\n      </PoolIconContainer>\n    </MouseoverTooltip>\n  )\n}\n\nconst NoContentContainerBackground = styled.div<{ height?: number }>`\n  position: relative;\n  width: 100%;\n  height: ${({ height }) => (height ? `${height}px` : 'auto')};\n  padding-top: 100%;\n  background: ${({ theme }) =>\n    `linear-gradient(90deg, ${theme.backgroundSurface} 0%, ${theme.backgroundInteractive} 95.83%)`};\n`\n\nconst NoContentText = styled(ThemedText.BodyPrimary)`\n  position: absolute;\n  text-align: center;\n  left: 50%;\n  top: 50%;\n  transform: translate3d(-50%, -50%, 0);\n  color: ${colors.gray500};\n`\n\nconst NoContentContainer = ({ height }: { height?: number }) => (\n  <>\n    <NoContentContainerBackground height={height}>\n      <NoContentText>\n        <Trans>Content not</Trans>\n        <br />\n        <Trans>available yet</Trans>\n      </NoContentText>\n    </NoContentContainerBackground>\n  </>\n)\n\nexport {\n  Audio,\n  Container,\n  DetailsContainer,\n  DetailsLink,\n  Erc1155Controls,\n  Image,\n  ImageContainer,\n  InfoContainer,\n  MarketplaceIcon,\n  Pool,\n  PrimaryDetails,\n  PrimaryInfo,\n  PrimaryRow,\n  ProfileNftDetails,\n  Ranking,\n  SecondaryDetails,\n  SecondaryInfo,\n  SecondaryRow,\n  Suspicious,\n  SUSPICIOUS_TEXT,\n  TertiaryInfo,\n  useAssetMediaType,\n  useNotForSale,\n  Video,\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/loading.css.ts.vanilla.css!=!../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/loading.css.ts.vanilla.css\\\",\\\"source\\\":\\\"QGtleWZyYW1lcyBfMmtkdmZ3MCB7CiAgMCUgewogICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMTAwJSA1MCU7CiAgfQogIDEwMCUgewogICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMCUgNTAlOwogIH0KfQouXzJrZHZmdzEgewogIGFuaW1hdGlvbjogXzJrZHZmdzAgMS41cyBpbmZpbml0ZTsKICBhbmltYXRpb24tZmlsbC1tb2RlOiBib3RoOwogIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byBsZWZ0LCAjN0M4NUEyNEQgMjUlLCByZ2JhKDAsMCwwLDAuMykgNTAlLCAjN0M4NUEyNEQgNzUlKTsKICBiYWNrZ3JvdW5kLXNpemU6IDQwMCU7CiAgd2lsbC1jaGFuZ2U6IGJhY2tncm91bmQtcG9zaXRpb247Cn0KLl8ya2R2ZnczIHsKICB1c2VyLXNlbGVjdDogbm9uZTsKfQ==\\\"}!../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var loadingBlock = '_2kdvfw1';\nexport var loadingAsset = '_2kdvfw3 _2kdvfw1 rgw6ez7aj rgw6ez78v rgw6ez4fj';","import { IRoute, Protocol } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { Pool } from '@uniswap/v3-sdk'\nimport { TokenAmountInput, TokenTradeRouteInput, TradePoolInput } from 'graphql/data/__generated__/types-and-hooks'\nimport { InterfaceTrade } from 'state/routing/types'\n\ninterface SwapAmounts {\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\ninterface TradeTokenInputAmounts {\n  inputAmount: TokenAmountInput\n  outputAmount: TokenAmountInput\n}\n\ninterface Swap {\n  route: IRoute<Currency, Currency, Pair | Pool>\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nfunction buildTradeRouteInputAmounts(swapAmounts: SwapAmounts): TradeTokenInputAmounts {\n  return {\n    inputAmount: {\n      amount: swapAmounts.inputAmount.quotient.toString(),\n      token: {\n        address: swapAmounts.inputAmount.currency.isToken\n          ? swapAmounts.inputAmount.currency.address\n          : '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n        chainId: swapAmounts.inputAmount.currency.chainId,\n        decimals: swapAmounts.inputAmount.currency.decimals,\n        isNative: swapAmounts.inputAmount.currency.isNative,\n      },\n    },\n    outputAmount: {\n      amount: swapAmounts.outputAmount.quotient.toString(),\n      token: {\n        address: swapAmounts.outputAmount.currency.isToken\n          ? swapAmounts.outputAmount.currency.address\n          : '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n        chainId: swapAmounts.outputAmount.currency.chainId,\n        decimals: swapAmounts.outputAmount.currency.decimals,\n        isNative: swapAmounts.outputAmount.currency.isNative,\n      },\n    },\n  }\n}\n\nfunction buildPool(pool: Pair | Pool): TradePoolInput {\n  const isPool = 'fee' in pool\n\n  return {\n    pair: !isPool\n      ? {\n          tokenAmountA: {\n            amount: pool.reserve0.quotient.toString(),\n            token: {\n              address: pool.token0.address,\n              chainId: pool.token0.chainId,\n              decimals: pool.token0.decimals,\n              isNative: pool.token0.isNative,\n            },\n          },\n          tokenAmountB: {\n            amount: pool.reserve1.quotient.toString(),\n            token: {\n              address: pool.token1.address,\n              chainId: pool.token1.chainId,\n              decimals: pool.token1.decimals,\n              isNative: pool.token1.isNative,\n            },\n          },\n        }\n      : undefined,\n    pool: isPool\n      ? {\n          fee: pool.fee,\n          liquidity: pool.liquidity.toString(),\n          sqrtRatioX96: pool.sqrtRatioX96.toString(),\n          tickCurrent: pool.tickCurrent.toString(),\n          tokenA: {\n            address: pool.token0.address,\n            chainId: pool.token0.chainId,\n            decimals: pool.token0.decimals,\n            isNative: pool.token0.isNative,\n          },\n          tokenB: {\n            address: pool.token1.address,\n            chainId: pool.token1.chainId,\n            decimals: pool.token1.decimals,\n            isNative: pool.token1.isNative,\n          },\n        }\n      : undefined,\n  }\n}\n\nfunction buildPools(pools: (Pair | Pool)[]): TradePoolInput[] {\n  return pools.map((pool) => buildPool(pool))\n}\n\nfunction buildTradeRouteInput(swap: Swap): TokenTradeRouteInput {\n  return {\n    ...buildTradeRouteInputAmounts({ inputAmount: swap.inputAmount, outputAmount: swap.outputAmount }),\n    pools: buildPools(swap.route.pools),\n  }\n}\n\nexport function buildAllTradeRouteInputs(trade: InterfaceTrade<Currency, Currency, TradeType>): {\n  mixedTokenTradeRouteInputs: TokenTradeRouteInput[] | undefined\n  v2TokenTradeRouteInputs: TokenTradeRouteInput[] | undefined\n  v3TokenTradeRouteInputs: TokenTradeRouteInput[] | undefined\n} {\n  const mixedTokenTradeRouteInputs: TokenTradeRouteInput[] = []\n  const v2TokenTradeRouteInputs: TokenTradeRouteInput[] = []\n  const v3TokenTradeRouteInputs: TokenTradeRouteInput[] = []\n\n  const swaps = trade.swaps\n\n  for (const swap of swaps) {\n    if (swap.route.protocol === Protocol.MIXED) {\n      mixedTokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    } else if (swap.route.protocol === Protocol.V2) {\n      v2TokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    } else {\n      v3TokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    }\n  }\n\n  return {\n    mixedTokenTradeRouteInputs: mixedTokenTradeRouteInputs.length > 0 ? mixedTokenTradeRouteInputs : undefined,\n    v2TokenTradeRouteInputs: v2TokenTradeRouteInputs.length > 0 ? v2TokenTradeRouteInputs : undefined,\n    v3TokenTradeRouteInputs: v3TokenTradeRouteInputs.length > 0 ? v3TokenTradeRouteInputs : undefined,\n  }\n}\n","import { Currency } from '@uniswap/sdk-core'\nimport { TokenTradeInput } from 'graphql/data/__generated__/types-and-hooks'\nimport create from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\ninterface TokenInputState {\n  inputCurrency: Currency | undefined\n  setInputCurrency: (currency: Currency | undefined) => void\n  clearInputCurrency: () => void\n  tokenTradeInput: TokenTradeInput | undefined\n  setTokenTradeInput: (tokenTradeInput: TokenTradeInput | undefined) => void\n}\n\nexport const useTokenInput = create<TokenInputState>()(\n  devtools(\n    (set) => ({\n      inputCurrency: undefined,\n      tokenTradeInput: undefined,\n      setInputCurrency: (currency) => set(() => ({ inputCurrency: currency })),\n      clearInputCurrency: () => set(() => ({ inputCurrency: undefined })),\n      setTokenTradeInput: (tokenTradeInput) => set(() => ({ tokenTradeInput })),\n    }),\n    { name: 'useTokenInput' }\n  )\n)\n","import { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport { PermitInput, TokenTradeRoutesInput, TokenTradeType } from 'graphql/data/__generated__/types-and-hooks'\nimport { Allowance } from 'hooks/usePermit2Allowance'\nimport { buildAllTradeRouteInputs } from 'nft/utils/tokenRoutes'\nimport { useEffect } from 'react'\nimport { InterfaceTrade } from 'state/routing/types'\n\nimport { useTokenInput } from './useTokenInput'\n\nexport default function usePayWithAnyTokenSwap(\n  trade?: InterfaceTrade<Currency, Currency, TradeType> | undefined,\n  allowance?: Allowance,\n  allowedSlippage?: Percent\n) {\n  const setTokenTradeInput = useTokenInput((state) => state.setTokenTradeInput)\n  const hasRoutes = !!trade && trade.routes\n  const hasInputAmount = !!trade && !!trade.inputAmount && trade.inputAmount.currency.isToken\n  const hasAllowance = !!allowedSlippage && !!allowance\n\n  useEffect(() => {\n    if (!hasRoutes || !hasInputAmount || !hasAllowance) {\n      setTokenTradeInput(undefined)\n      return\n    }\n\n    const slippage = parseInt(allowedSlippage.multiply(100).toSignificant(2))\n\n    const { mixedTokenTradeRouteInputs, v2TokenTradeRouteInputs, v3TokenTradeRouteInputs } =\n      buildAllTradeRouteInputs(trade)\n\n    const routes: TokenTradeRoutesInput = {\n      mixedRoutes: mixedTokenTradeRouteInputs,\n      tradeType: TokenTradeType.ExactOutput,\n      v2Routes: v2TokenTradeRouteInputs,\n      v3Routes: v3TokenTradeRouteInputs,\n    }\n\n    const permitInput: PermitInput | undefined =\n      'permitSignature' in allowance && allowance.permitSignature\n        ? {\n            details: {\n              amount: allowance.permitSignature.details.amount.toString(),\n              expiration: allowance.permitSignature.details.expiration.toString(),\n              nonce: allowance.permitSignature.details.nonce.toString(),\n              token: allowance.permitSignature.details.token,\n            },\n            sigDeadline: allowance.permitSignature.sigDeadline.toString(),\n            signature: allowance.permitSignature.signature,\n            spender: allowance.permitSignature.spender,\n          }\n        : undefined\n\n    setTokenTradeInput({\n      permit: permitInput,\n      routes,\n      slippageToleranceBasisPoints: slippage,\n      tokenAmount: {\n        amount: trade.inputAmount.quotient.toString(),\n        token: {\n          address: trade.inputAmount.currency.address,\n          chainId: trade.inputAmount.currency.chainId,\n          decimals: trade.inputAmount.currency.decimals,\n          isNative: trade.inputAmount.currency.isNative,\n        },\n      },\n    })\n  }, [allowance, allowedSlippage, hasAllowance, hasInputAmount, hasRoutes, setTokenTradeInput, trade])\n}\n","import { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport { useMemo } from 'react'\nimport { InterfaceTrade } from 'state/routing/types'\nimport { useTheme } from 'styled-components/macro'\nimport { computeRealizedPriceImpact, getPriceImpactWarning } from 'utils/prices'\n\nexport interface PriceImpact {\n  priceImpactSeverity: PriceImpactSeverity\n  displayPercentage(): string\n}\n\ninterface PriceImpactSeverity {\n  type: 'warning' | 'error'\n  color: string\n}\n\nexport function usePriceImpact(trade?: InterfaceTrade<Currency, Currency, TradeType>): PriceImpact | undefined {\n  const theme = useTheme()\n\n  return useMemo(() => {\n    const marketPriceImpact = trade ? computeRealizedPriceImpact(trade) : undefined\n    const priceImpactWarning = marketPriceImpact ? getPriceImpactWarning(marketPriceImpact) : undefined\n    const warningColor =\n      priceImpactWarning === 'error'\n        ? theme.accentCritical\n        : priceImpactWarning === 'warning'\n        ? theme.accentWarning\n        : undefined\n\n    return marketPriceImpact && priceImpactWarning && warningColor\n      ? {\n          priceImpactSeverity: {\n            type: priceImpactWarning,\n            color: warningColor,\n          },\n          displayPercentage: () => toHumanReadablePercent(marketPriceImpact),\n        }\n      : undefined\n  }, [theme.accentCritical, theme.accentWarning, trade])\n}\n\nfunction toHumanReadablePercent(priceImpact: Percent): string {\n  const sign = priceImpact.lessThan(0) ? '+' : ''\n  const exactFloat = (Number(priceImpact.numerator) / Number(priceImpact.denominator)) * 100\n  if (exactFloat < 0.005) {\n    return '0.00%'\n  }\n  const number = parseFloat(priceImpact.multiply(-1)?.toFixed(2))\n  return `${sign}${number}%`\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther } from '@ethersproject/units'\nimport { parseEther } from '@ethersproject/units'\nimport { t, Trans } from '@lingui/macro'\nimport { sendAnalyticsEvent, TraceEvent } from '@uniswap/analytics'\nimport { BrowserEvent, InterfaceElementName, NFTEventName } from '@uniswap/analytics-events'\nimport { Currency, CurrencyAmount, Token, TradeType } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport Column from 'components/Column'\nimport Loader from 'components/Loader'\nimport CurrencyLogo from 'components/Logo/CurrencyLogo'\nimport Row from 'components/Row'\nimport CurrencySearchModal from 'components/SearchModal/CurrencySearchModal'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { MouseoverTooltip } from 'components/Tooltip'\nimport { SupportedChainId } from 'constants/chains'\nimport { usePayWithAnyTokenEnabled } from 'featureFlags/flags/payWithAnyToken'\nimport { useCurrency } from 'hooks/Tokens'\nimport { AllowanceState } from 'hooks/usePermit2Allowance'\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\nimport { useTokenBalance } from 'lib/hooks/useCurrencyBalance'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { useBag } from 'nft/hooks/useBag'\nimport useDerivedPayWithAnyTokenSwapInfo from 'nft/hooks/useDerivedPayWithAnyTokenSwapInfo'\nimport usePayWithAnyTokenSwap from 'nft/hooks/usePayWithAnyTokenSwap'\nimport usePermit2Approval from 'nft/hooks/usePermit2Approval'\nimport { PriceImpact, usePriceImpact } from 'nft/hooks/usePriceImpact'\nimport { useTokenInput } from 'nft/hooks/useTokenInput'\nimport { useWalletBalance } from 'nft/hooks/useWalletBalance'\nimport { BagStatus } from 'nft/types'\nimport { ethNumberStandardFormatter, formatWeiToDecimal } from 'nft/utils'\nimport { PropsWithChildren, useEffect, useMemo, useState } from 'react'\nimport { AlertTriangle, ChevronDown } from 'react-feather'\nimport { useToggleWalletModal } from 'state/application/hooks'\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { ThemedText } from 'theme'\nimport { switchChain } from 'utils/switchChain'\nimport { shallow } from 'zustand/shallow'\n\nconst FooterContainer = styled.div`\n  padding: 0px 12px;\n`\n\nconst Footer = styled.div`\n  border-top: 1px solid ${({ theme }) => theme.backgroundOutline};\n  color: ${({ theme }) => theme.textPrimary};\n  display: flex;\n  flex-direction: column;\n  margin: 0px 16px 8px;\n  padding: 12px 0px;\n  border-bottom-left-radius: 12px;\n  border-bottom-right-radius: 12px;\n`\n\nconst FooterHeader = styled(Column)<{ usingPayWithAnyToken?: boolean }>`\n  padding-top: 8px;\n  padding-bottom: ${({ usingPayWithAnyToken }) => (usingPayWithAnyToken ? '16px' : '20px')};\n`\n\nconst CurrencyRow = styled(Row)`\n  justify-content: space-between;\n  align-items: start;\n  gap: 8px;\n`\n\nconst TotalColumn = styled(Column)`\n  text-align: end;\n  overflow-x: hidden;\n`\n\nconst WarningIcon = styled(AlertTriangle)`\n  width: 14px;\n  margin-right: 4px;\n  color: inherit;\n`\nconst WarningText = styled(ThemedText.BodyPrimary)<{ $color: string }>`\n  align-items: center;\n  color: ${({ $color }) => $color};\n  display: flex;\n  justify-content: center;\n  margin-bottom: 10px !important;\n  text-align: center;\n`\n\nconst HelperText = styled(ThemedText.Caption)<{ $color: string }>`\n  color: ${({ $color }) => $color};\n  display: flex;\n  justify-content: center;\n  text-align: center;\n  margin-bottom: 10px !important;\n`\n\nconst CurrencyInput = styled(Row)`\n  gap: 8px;\n  cursor: pointer;\n`\n\nconst PayButton = styled.button<{ $backgroundColor: string; $color: string }>`\n  display: flex;\n  background: ${({ $backgroundColor }) => $backgroundColor};\n  color: ${({ $color }) => $color};\n  font-weight: 600;\n  line-height: 24px;\n  font-size: 16px;\n  gap: 16px;\n  justify-content: center;\n  border: none;\n  border-radius: 12px;\n  padding: 12px 0px;\n  cursor: pointer;\n  align-items: center;\n\n  &:disabled {\n    opacity: 0.6;\n    cursor: auto;\n  }\n`\nconst FiatLoadingBubble = styled(LoadingBubble)`\n  border-radius: 4px;\n  width: 4rem;\n  height: 20px;\n  align-self: end;\n`\nconst PriceImpactContainer = styled(Row)`\n  align-items: center;\n  gap: 8px;\n  width: 100%;\n  justify-content: flex-end;\n`\n\nconst PriceImpactRow = styled(Row)`\n  align-items: center;\n  gap: 8px;\n`\n\nconst ValueText = styled(ThemedText.BodyPrimary)`\n  line-height: 20px;\n  font-weight: 500;\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  scrollbar-width: none;\n\n  ::-webkit-scrollbar {\n    display: none;\n  }\n`\n\ninterface ActionButtonProps {\n  disabled?: boolean\n  onClick: () => void\n  backgroundColor: string\n  textColor: string\n}\n\nconst ActionButton = ({\n  disabled,\n  children,\n  onClick,\n  backgroundColor,\n  textColor,\n}: PropsWithChildren<ActionButtonProps>) => {\n  return (\n    <PayButton disabled={disabled} onClick={onClick} $backgroundColor={backgroundColor} $color={textColor}>\n      {children}\n    </PayButton>\n  )\n}\n\ninterface HelperTextProps {\n  color: string\n}\n\nconst Warning = ({ color, children }: PropsWithChildren<HelperTextProps>) => {\n  if (!children) {\n    return null\n  }\n  return (\n    <WarningText fontSize=\"14px\" lineHeight=\"20px\" $color={color}>\n      <WarningIcon />\n      {children}\n    </WarningText>\n  )\n}\n\nconst Helper = ({ children, color }: PropsWithChildren<HelperTextProps>) => {\n  if (!children) {\n    return null\n  }\n  return (\n    <HelperText lineHeight=\"16px\" $color={color}>\n      {children}\n    </HelperText>\n  )\n}\n\nconst InputCurrencyValue = ({\n  usingPayWithAnyToken,\n  totalEthPrice,\n  activeCurrency,\n  tradeState,\n  trade,\n}: {\n  usingPayWithAnyToken: boolean\n  totalEthPrice: BigNumber\n  activeCurrency: Currency | undefined | null\n  tradeState: TradeState\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\n}) => {\n  if (!usingPayWithAnyToken) {\n    return (\n      <ThemedText.BodyPrimary lineHeight=\"20px\" fontWeight=\"500\">\n        {formatWeiToDecimal(totalEthPrice.toString())}\n        &nbsp;{activeCurrency?.symbol ?? 'ETH'}\n      </ThemedText.BodyPrimary>\n    )\n  }\n\n  if (tradeState === TradeState.LOADING) {\n    return (\n      <ThemedText.BodyPrimary color=\"textTertiary\" lineHeight=\"20px\" fontWeight=\"500\">\n        <Trans>Fetching price...</Trans>\n      </ThemedText.BodyPrimary>\n    )\n  }\n\n  return (\n    <ValueText color={tradeState === TradeState.SYNCING ? 'textTertiary' : 'textPrimary'}>\n      {ethNumberStandardFormatter(trade?.inputAmount.toExact())}\n    </ValueText>\n  )\n}\n\nconst FiatValue = ({\n  usdcValue,\n  priceImpact,\n  tradeState,\n  usingPayWithAnyToken,\n}: {\n  usdcValue: CurrencyAmount<Token> | null\n  priceImpact: PriceImpact | undefined\n  tradeState: TradeState\n  usingPayWithAnyToken: boolean\n}) => {\n  if (!usdcValue) {\n    if (usingPayWithAnyToken && (tradeState === TradeState.INVALID || tradeState === TradeState.NO_ROUTE_FOUND)) {\n      return null\n    }\n\n    return <FiatLoadingBubble />\n  }\n\n  return (\n    <PriceImpactContainer>\n      {priceImpact && (\n        <>\n          <MouseoverTooltip text={t`The estimated difference between the USD values of input and output amounts.`}>\n            <PriceImpactRow>\n              <AlertTriangle color={priceImpact.priceImpactSeverity.color} size=\"16px\" />\n              <ThemedText.BodySmall style={{ color: priceImpact.priceImpactSeverity.color }} lineHeight=\"20px\">\n                (<Trans>{priceImpact.displayPercentage()}</Trans>)\n              </ThemedText.BodySmall>\n            </PriceImpactRow>\n          </MouseoverTooltip>\n        </>\n      )}\n      <ThemedText.BodySmall color=\"textTertiary\" lineHeight=\"20px\">\n        {`${ethNumberStandardFormatter(usdcValue?.toExact(), true)}`}\n      </ThemedText.BodySmall>\n    </PriceImpactContainer>\n  )\n}\n\ninterface BagFooterProps {\n  totalEthPrice: BigNumber\n  fetchAssets: () => void\n  eventProperties: Record<string, unknown>\n}\n\nconst PENDING_BAG_STATUSES = [\n  BagStatus.FETCHING_ROUTE,\n  BagStatus.CONFIRMING_IN_WALLET,\n  BagStatus.FETCHING_FINAL_ROUTE,\n  BagStatus.PROCESSING_TRANSACTION,\n]\n\nexport const BagFooter = ({ totalEthPrice, fetchAssets, eventProperties }: BagFooterProps) => {\n  const toggleWalletModal = useToggleWalletModal()\n  const theme = useTheme()\n  const { account, chainId, connector } = useWeb3React()\n  const connected = Boolean(account && chainId)\n  const shouldUsePayWithAnyToken = usePayWithAnyTokenEnabled()\n  const inputCurrency = useTokenInput((state) => state.inputCurrency)\n  const setInputCurrency = useTokenInput((state) => state.setInputCurrency)\n  const defaultCurrency = useCurrency('ETH')\n  const inputCurrencyBalance = useTokenBalance(\n    account ?? undefined,\n    !!inputCurrency && inputCurrency.isToken ? inputCurrency : undefined\n  )\n\n  const {\n    isLocked: bagIsLocked,\n    bagStatus,\n    setBagExpanded,\n    setBagStatus,\n  } = useBag(\n    ({ isLocked, bagStatus, setBagExpanded, setBagStatus }) => ({\n      isLocked,\n      bagStatus,\n      setBagExpanded,\n      setBagStatus,\n    }),\n    shallow\n  )\n\n  const [tokenSelectorOpen, setTokenSelectorOpen] = useState(false)\n\n  const isPending = PENDING_BAG_STATUSES.includes(bagStatus)\n  const activeCurrency = inputCurrency ?? defaultCurrency\n  const usingPayWithAnyToken = !!inputCurrency && shouldUsePayWithAnyToken && chainId === SupportedChainId.MAINNET\n\n  const parsedOutputAmount = useMemo(() => {\n    return tryParseCurrencyAmount(formatEther(totalEthPrice.toString()), defaultCurrency ?? undefined)\n  }, [defaultCurrency, totalEthPrice])\n  const {\n    state: tradeState,\n    trade,\n    maximumAmountIn,\n    allowedSlippage,\n  } = useDerivedPayWithAnyTokenSwapInfo(usingPayWithAnyToken ? inputCurrency : undefined, parsedOutputAmount)\n  const { allowance, isAllowancePending, isApprovalLoading, updateAllowance } = usePermit2Approval(\n    trade?.inputAmount.currency.isToken ? (trade?.inputAmount as CurrencyAmount<Token>) : undefined,\n    maximumAmountIn,\n    shouldUsePayWithAnyToken\n  )\n  usePayWithAnyTokenSwap(trade, allowance, allowedSlippage)\n  const priceImpact = usePriceImpact(trade)\n\n  const fiatValueTradeInput = useStablecoinValue(trade?.inputAmount)\n  const fiatValueTradeOutput = useStablecoinValue(parsedOutputAmount)\n  const usdcValue = usingPayWithAnyToken ? fiatValueTradeInput : fiatValueTradeOutput\n\n  const { balance: balanceInEth } = useWalletBalance()\n  const sufficientBalance = useMemo(() => {\n    if (!connected || chainId !== SupportedChainId.MAINNET) {\n      return undefined\n    }\n\n    if (inputCurrency) {\n      const inputAmount = trade?.inputAmount\n\n      if (!inputCurrencyBalance || !inputAmount) {\n        return undefined\n      }\n\n      return !inputCurrencyBalance.lessThan(inputAmount)\n    }\n\n    return parseEther(balanceInEth).gte(totalEthPrice)\n  }, [connected, chainId, inputCurrency, balanceInEth, totalEthPrice, trade?.inputAmount, inputCurrencyBalance])\n\n  useEffect(() => {\n    setBagStatus(BagStatus.ADDING_TO_BAG)\n  }, [inputCurrency, setBagStatus])\n\n  const {\n    buttonText,\n    buttonTextColor,\n    disabled,\n    warningText,\n    warningTextColor,\n    helperText,\n    helperTextColor,\n    handleClick,\n    buttonColor,\n  } = useMemo(() => {\n    let handleClick = fetchAssets\n    let buttonText = <Trans>Something went wrong</Trans>\n    let disabled = true\n    let warningText = undefined\n    let warningTextColor = theme.accentWarning\n    let helperText = undefined\n    let helperTextColor = theme.textSecondary\n    let buttonColor = theme.accentAction\n    let buttonTextColor = theme.accentTextLightPrimary\n\n    if (connected && chainId !== SupportedChainId.MAINNET) {\n      handleClick = () => switchChain(connector, SupportedChainId.MAINNET)\n      buttonText = <Trans>Switch networks</Trans>\n      disabled = false\n      warningText = <Trans>Wrong network</Trans>\n    } else if (sufficientBalance === false) {\n      buttonText = <Trans>Pay</Trans>\n      disabled = true\n      warningText = <Trans>Insufficient funds</Trans>\n    } else if (bagStatus === BagStatus.WARNING) {\n      warningText = <Trans>Something went wrong. Please try again.</Trans>\n    } else if (!connected) {\n      handleClick = () => {\n        toggleWalletModal()\n        setBagExpanded({ bagExpanded: false })\n      }\n      disabled = false\n      buttonText = <Trans>Connect wallet</Trans>\n    } else if (bagStatus === BagStatus.FETCHING_FINAL_ROUTE || bagStatus === BagStatus.CONFIRMING_IN_WALLET) {\n      disabled = true\n      buttonText = <Trans>Proceed in wallet</Trans>\n    } else if (bagStatus === BagStatus.PROCESSING_TRANSACTION) {\n      disabled = true\n      buttonText = <Trans>Transaction pending</Trans>\n    } else if (usingPayWithAnyToken && tradeState !== TradeState.VALID) {\n      disabled = true\n      buttonText = <Trans>Fetching Route</Trans>\n\n      if (tradeState === TradeState.INVALID) {\n        buttonText = <Trans>Pay</Trans>\n      }\n\n      if (tradeState === TradeState.NO_ROUTE_FOUND) {\n        buttonText = <Trans>Insufficient liquidity</Trans>\n        buttonColor = theme.backgroundInteractive\n        buttonTextColor = theme.textPrimary\n        helperText = <Trans>Insufficient pool liquidity to complete transaction</Trans>\n      }\n    } else if (allowance.state === AllowanceState.REQUIRED || allowance.state === AllowanceState.LOADING) {\n      handleClick = () => updateAllowance()\n      disabled = isAllowancePending || isApprovalLoading || allowance.state === AllowanceState.LOADING\n\n      if (allowance.state === AllowanceState.LOADING) {\n        buttonText = <Trans>Loading Allowance</Trans>\n      } else if (isAllowancePending) {\n        buttonText = <Trans>Approve in your wallet</Trans>\n      } else if (isApprovalLoading) {\n        buttonText = <Trans>Approval pending</Trans>\n      } else {\n        helperText = <Trans>An approval is needed to use this token. </Trans>\n        buttonText = <Trans>Approve</Trans>\n      }\n    } else if (bagStatus === BagStatus.CONFIRM_QUOTE) {\n      disabled = false\n      warningTextColor = theme.accentAction\n      warningText = <Trans>Price updated</Trans>\n      buttonText = <Trans>Pay</Trans>\n    } else if (priceImpact && priceImpact.priceImpactSeverity.type === 'error') {\n      disabled = false\n      buttonColor = priceImpact.priceImpactSeverity.color\n      helperText = <Trans>Price impact warning</Trans>\n      helperTextColor = priceImpact.priceImpactSeverity.color\n      buttonText = <Trans>Pay Anyway</Trans>\n    } else if (sufficientBalance === true) {\n      disabled = false\n      buttonText = <Trans>Pay</Trans>\n      helperText = usingPayWithAnyToken ? <Trans>Refunds for unavailable items will be given in ETH</Trans> : undefined\n    }\n\n    return {\n      buttonText,\n      buttonTextColor,\n      disabled,\n      warningText,\n      warningTextColor,\n      helperText,\n      helperTextColor,\n      handleClick,\n      buttonColor,\n    }\n  }, [\n    fetchAssets,\n    theme.accentWarning,\n    theme.textSecondary,\n    theme.accentAction,\n    theme.accentTextLightPrimary,\n    theme.backgroundInteractive,\n    theme.textPrimary,\n    connected,\n    chainId,\n    sufficientBalance,\n    bagStatus,\n    usingPayWithAnyToken,\n    tradeState,\n    allowance.state,\n    priceImpact,\n    connector,\n    toggleWalletModal,\n    setBagExpanded,\n    isAllowancePending,\n    isApprovalLoading,\n    updateAllowance,\n  ])\n\n  const traceEventProperties = {\n    usd_value: usdcValue?.toExact(),\n    using_erc20: !!inputCurrency,\n    ...eventProperties,\n  }\n\n  console.log(bagStatus)\n\n  return (\n    <FooterContainer>\n      <Footer>\n        {shouldUsePayWithAnyToken && (\n          <FooterHeader gap=\"xs\" usingPayWithAnyToken={shouldUsePayWithAnyToken}>\n            <CurrencyRow>\n              <Column gap=\"xs\">\n                <ThemedText.SubHeaderSmall>\n                  <Trans>Pay with</Trans>\n                </ThemedText.SubHeaderSmall>\n                <CurrencyInput\n                  onClick={() => {\n                    if (!bagIsLocked) {\n                      setTokenSelectorOpen(true)\n                      sendAnalyticsEvent(NFTEventName.NFT_BUY_TOKEN_SELECTOR_CLICKED)\n                    }\n                  }}\n                >\n                  <CurrencyLogo currency={activeCurrency} size=\"24px\" />\n                  <ThemedText.HeadlineSmall fontWeight={500} lineHeight=\"24px\">\n                    {activeCurrency?.symbol}\n                  </ThemedText.HeadlineSmall>\n                  <ChevronDown size={20} color={theme.textSecondary} />\n                </CurrencyInput>\n              </Column>\n              <TotalColumn gap=\"xs\">\n                <ThemedText.SubHeaderSmall marginBottom=\"4px\">\n                  <Trans>Total</Trans>\n                </ThemedText.SubHeaderSmall>\n                <InputCurrencyValue\n                  usingPayWithAnyToken={usingPayWithAnyToken}\n                  totalEthPrice={totalEthPrice}\n                  activeCurrency={activeCurrency}\n                  tradeState={tradeState}\n                  trade={trade}\n                />\n              </TotalColumn>\n            </CurrencyRow>\n            <FiatValue\n              usdcValue={usdcValue}\n              priceImpact={priceImpact}\n              tradeState={tradeState}\n              usingPayWithAnyToken={usingPayWithAnyToken}\n            />\n          </FooterHeader>\n        )}\n        {!shouldUsePayWithAnyToken && (\n          <FooterHeader gap=\"xs\">\n            <Row justify=\"space-between\">\n              <div>\n                <ThemedText.HeadlineSmall>Total</ThemedText.HeadlineSmall>\n              </div>\n              <div>\n                <ThemedText.HeadlineSmall>\n                  {formatWeiToDecimal(totalEthPrice.toString())}\n                  &nbsp;{activeCurrency?.symbol ?? 'ETH'}\n                </ThemedText.HeadlineSmall>\n              </div>\n            </Row>\n            <FiatValue\n              usdcValue={usdcValue}\n              priceImpact={priceImpact}\n              tradeState={tradeState}\n              usingPayWithAnyToken={usingPayWithAnyToken}\n            />\n          </FooterHeader>\n        )}\n        <TraceEvent\n          events={[BrowserEvent.onClick]}\n          name={NFTEventName.NFT_BUY_BAG_PAY}\n          element={InterfaceElementName.NFT_BUY_BAG_PAY_BUTTON}\n          properties={{ ...traceEventProperties }}\n          shouldLogImpression={connected && !disabled}\n        >\n          <Warning color={warningTextColor}>{warningText}</Warning>\n          <Helper color={helperTextColor}>{helperText}</Helper>\n          <ActionButton\n            onClick={handleClick}\n            disabled={disabled || isPending}\n            backgroundColor={buttonColor}\n            textColor={buttonTextColor}\n          >\n            {isPending && <Loader size=\"20px\" stroke=\"white\" />}\n            {buttonText}\n          </ActionButton>\n        </TraceEvent>\n      </Footer>\n      <CurrencySearchModal\n        isOpen={tokenSelectorOpen}\n        onDismiss={() => setTokenSelectorOpen(false)}\n        onCurrencySelect={(currency: Currency) => {\n          setInputCurrency(currency.isNative ? undefined : currency)\n          if (currency.isToken) {\n            sendAnalyticsEvent(NFTEventName.NFT_BUY_TOKEN_SELECTED, {\n              token_address: currency.address,\n              token_symbol: currency.symbol,\n            })\n          }\n        }}\n        selectedCurrency={activeCurrency ?? undefined}\n        onlyShowCurrenciesWithBalance={true}\n      />\n    </FooterContainer>\n  )\n}\n","import { Currency, CurrencyAmount, NativeCurrency, Percent, Token, TradeType } from '@uniswap/sdk-core'\nimport useAutoSlippageTolerance from 'hooks/useAutoSlippageTolerance'\nimport { useBestTrade } from 'hooks/useBestTrade'\nimport { useMemo } from 'react'\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\n\nexport default function useDerivedPayWithAnyTokenSwapInfo(\n  inputCurrency?: Currency,\n  parsedOutputAmount?: CurrencyAmount<NativeCurrency | Token>\n): {\n  state: TradeState\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\n  maximumAmountIn: CurrencyAmount<Token> | undefined\n  allowedSlippage: Percent\n} {\n  const { state, trade } = useBestTrade(TradeType.EXACT_OUTPUT, parsedOutputAmount, inputCurrency ?? undefined)\n  const allowedSlippage = useAutoSlippageTolerance(trade)\n  const maximumAmountIn = useMemo(() => {\n    const maximumAmountIn = trade?.maximumAmountIn(allowedSlippage)\n    return maximumAmountIn?.currency.isToken ? (maximumAmountIn as CurrencyAmount<Token>) : undefined\n  }, [allowedSlippage, trade])\n\n  return useMemo(() => {\n    return {\n      state,\n      trade,\n      maximumAmountIn,\n      allowedSlippage,\n    }\n  }, [allowedSlippage, maximumAmountIn, state, trade])\n}\n","import { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { InterfaceEventName } from '@uniswap/analytics-events'\nimport { CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { UNIVERSAL_ROUTER_ADDRESS } from '@uniswap/universal-router-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport usePermit2Allowance, { AllowanceState } from 'hooks/usePermit2Allowance'\nimport { useCallback, useMemo, useState } from 'react'\nimport invariant from 'tiny-invariant'\n\nexport default function usePermit2Approval(\n  amount?: CurrencyAmount<Token>,\n  maximumAmount?: CurrencyAmount<Token>,\n  enabled?: boolean\n) {\n  const { chainId } = useWeb3React()\n\n  const allowance = usePermit2Allowance(\n    enabled ? maximumAmount ?? (amount?.currency.isToken ? (amount as CurrencyAmount<Token>) : undefined) : undefined,\n    enabled && chainId ? UNIVERSAL_ROUTER_ADDRESS(chainId) : undefined\n  )\n  const isApprovalLoading = allowance.state === AllowanceState.REQUIRED && allowance.isApprovalLoading\n  const [isAllowancePending, setIsAllowancePending] = useState(false)\n  const updateAllowance = useCallback(async () => {\n    invariant(allowance.state === AllowanceState.REQUIRED)\n    setIsAllowancePending(true)\n    try {\n      await allowance.approveAndPermit()\n      sendAnalyticsEvent(InterfaceEventName.APPROVE_TOKEN_TXN_SUBMITTED, {\n        chain_id: chainId,\n        token_symbol: maximumAmount?.currency.symbol,\n        token_address: maximumAmount?.currency.address,\n      })\n    } catch (e) {\n      console.error(e)\n    } finally {\n      setIsAllowancePending(false)\n    }\n  }, [allowance, chainId, maximumAmount?.currency.address, maximumAmount?.currency.symbol])\n\n  return useMemo(() => {\n    return {\n      allowance,\n      isApprovalLoading,\n      isAllowancePending,\n      updateAllowance,\n    }\n  }, [allowance, isAllowancePending, isApprovalLoading, updateAllowance])\n}\n","import { NftRouteResponse, NftTrade } from 'graphql/data/__generated__/types-and-hooks'\nimport { Markets, RouteResponse, RoutingActions, RoutingItem, TokenType } from 'nft/types'\n\nfunction buildRoutingItem(routingItem: NftTrade): RoutingItem {\n  return {\n    action: RoutingActions.Buy,\n    marketplace: routingItem.marketplace.toLowerCase(),\n    amountIn: routingItem.price.value,\n    assetIn: {\n      ETHPrice: routingItem.price.value,\n      baseAsset: routingItem.price.currency,\n      basePrice: routingItem.price.value,\n      baseDecimals: '18',\n    },\n    amountOut: routingItem.amount.toString(),\n    assetOut: {\n      id: routingItem.id,\n      decimals: 18,\n      address: routingItem.contractAddress,\n      priceInfo: {\n        ETHPrice: routingItem.price.value,\n        baseAsset: routingItem.price.currency,\n        basePrice: routingItem.price.value,\n        baseDecimals: '18',\n      },\n      tokenType: routingItem.tokenType as unknown as TokenType,\n      tokenId: routingItem.tokenId,\n      amount: routingItem.amount.toString(),\n      marketplace: routingItem.marketplace.toLowerCase() as Markets,\n      orderSource: 'api',\n    },\n  }\n}\n\nfunction buildRoutingItems(routingItems: NftTrade[]): RoutingItem[] {\n  return routingItems.map(buildRoutingItem)\n}\n\nexport function buildRouteResponse(\n  routeResponse: NftRouteResponse,\n  useErc20Token: boolean\n): { route: RoutingItem[]; routeResponse: RouteResponse } {\n  const route = routeResponse.route ? buildRoutingItems(routeResponse.route) : []\n  return {\n    route,\n    routeResponse: {\n      route,\n      valueToSend: useErc20Token ? undefined : routeResponse.sendAmount.value,\n      data: routeResponse.calldata,\n      to: routeResponse.toAddress,\n    },\n  }\n}\n","import { Box } from 'nft/components/Box'\nimport styled, { keyframes } from 'styled-components/macro'\n\nconst dash = keyframes`\n  0% {\n    stroke-dashoffset: 1000;\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n`\nconst Circle = styled.circle`\n  stroke-dasharray: 1000;\n  stroke-dashoffset: 0;\n  -webkit-animation: ${dash} linear;\n  animation: ${dash} linear;\n  animation-duration: 160s;\n  stroke: ${({ theme }) => theme.accentAction};\n`\nexport const TimedLoader = () => {\n  const stroke = 1.5\n\n  return (\n    <Box display=\"flex\" position=\"absolute\">\n      <svg height=\"18px\" width=\"18px\">\n        <Circle\n          strokeWidth={`${stroke}`}\n          strokeLinecap=\"round\"\n          style={{\n            transform: 'rotate(90deg)',\n            transformOrigin: '50% 50%',\n          }}\n          fill=\"transparent\"\n          r=\"8px\"\n          cx=\"9px\"\n          cy=\"9px\"\n        />\n      </svg>\n    </Box>\n  )\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkYTo6YmVmb3JlIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgaW5zZXQ6IC0xcHg7CiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDkxLjQ2ZGVnLCAjNDY3M0ZBIDAlLCAjOTY0NkZBIDEwMC4xMyUpIGJvcmRlci1ib3g7CiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDsKICAtd2Via2l0LW1hc2s6IGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCkgcGFkZGluZy1ib3gsIGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCk7OwogIC13ZWJraXQtbWFzay1jb21wb3NpdGU6IHhvcjs7CiAgbWFzay1jb21wb3NpdGU6IGV4Y2x1ZGU7CiAgYm9yZGVyLXN0eWxlOiBzb2xpZDsKICBib3JkZXItd2lkdGg6IDFweDsKICBib3JkZXItcmFkaXVzOiBpbmhlcml0OwogIHBvaW50ZXItZXZlbnRzOiBub25lOwp9Ci5fMTI3bDhoZGI6OmJlZm9yZSB7CiAgb3BhY2l0eTogMDsKICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbW96LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbXMtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlOwogIHRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZS1vdXQ7Cn0KLl8xMjdsOGhkYjpob3Zlcjo6YmVmb3JlIHsKICBvcGFjaXR5OiAxOwp9Ci5fMTI3bDhoZGQ6aG92ZXIgewogIGJhY2tncm91bmQ6IHZhcigtLXJndzZlejF3KTsKfQ==\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/bag/BagRow.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/BagRow.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xa3Vhd2MxIHsKICBtYXJnaW4tbGVmdDogLTRweDsKICBtYXJnaW4tcmlnaHQ6IC00cHg7Cn0KLl8xa3Vhd2MxOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1nZW5pZS1jb2xvcnMtc3RhdGVPdmVybGF5SG92ZXIpOwp9Ci5fMWt1YXdjNyB7CiAgZmlsdGVyOiBncmF5c2NhbGUoMTAwJSk7Cn0KLl8xa3Vhd2M5IHsKICBsaW5lLWhlaWdodDogMjRweDsKfQouXzFrdWF3Y2IgewogIGxpbmUtaGVpZ2h0OiAyNHB4Owp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var bagRow = '_1kuawc1 rgw6ez2cv rgw6ez2id rgw6ez2nj rgw6ez271 rgw6ez4dj rgw6ez3sj rgw6ez78z rgw6ez1dp rgw6ez7aj';\nexport var unavailableAssetsContainer = 'rgw6ez2o7 rgw6ez27p rgw6ezlj rgw6ezr1 rgw6ez4rj rgw6ez3sj rgw6ez4dj rgw6ez79b rgw6ez7ir rgw6ez537 rgw6ez5zj rgw6ez5np rgw6ez1dp';\nexport var priceChangeColumn = 'rgw6ez2o7 rgw6ez27p rgw6ezlj rgw6ezr1 rgw6ez4rj rgw6ez3s7 rgw6ez4dj rgw6ez79b rgw6ez7ir rgw6ez537 rgw6ez5np rgw6ez1dp rgw6ez78z';\nexport var priceChangeRow = 'rgw6ezcp rgw6ezav rgw6eze7 rgw6ez4bd rgw6ez3rv';\nexport var bagRowImage = 'rgw6ez14d rgw6ez1b7 rgw6ez48p rgw6ez7ab';\nexport var grayscaleImage = '_1kuawc7';\nexport var bagRowPrice = '_1kuawc9 rgw6ez3rv rgw6ezb1 rgw6ezd1 rgw6ez3wv';\nexport var assetName = '_1kuawcb rgw6ezb1 rgw6ezcv rgw6ez7l3 rgw6ez44v rgw6ez44p';\nexport var collectionName = 'rgw6ezcp rgw6ezav rgw6eze7 rgw6ez7l3 rgw6ez44p rgw6ez44v rgw6ez4dp';\nexport var icon = 'rgw6ez3wv';","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther } from '@ethersproject/units'\nimport clsx from 'clsx'\nimport { ButtonEmphasis, ButtonSize, ThemeButton } from 'components/Button'\nimport { TimedLoader } from 'nft/components/bag/TimedLoader'\nimport { Box } from 'nft/components/Box'\nimport { Suspicious } from 'nft/components/collection/Card'\nimport { Column, Row } from 'nft/components/Flex'\nimport {\n  ChevronDownBagIcon,\n  ChevronUpBagIcon,\n  CircularCloseIcon,\n  CloseTimerIcon,\n  SquareArrowDownIcon,\n  SquareArrowUpIcon,\n  VerifiedIcon,\n} from 'nft/components/icons'\nimport { bodySmall } from 'nft/css/common.css'\nimport { loadingBlock } from 'nft/css/loading.css'\nimport { GenieAsset, UpdatedGenieAsset } from 'nft/types'\nimport { ethNumberStandardFormatter, formatWeiToDecimal, getAssetHref } from 'nft/utils'\nimport { MouseEvent, useCallback, useEffect, useReducer, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components/macro'\n\nimport * as styles from './BagRow.css'\n\nexport const RemoveButton = styled(ThemeButton)`\n  border-radius: 12px;\n  font-size: 14px;\n  line-height: 16px;\n  margin-left: 16px;\n  padding: 12px 14px;\n`\nconst ReviewButton = styled(ThemeButton)`\n  border-radius: 12px;\n  flex: 1 1 auto;\n  font-size: 14px;\n  padding: 8px;\n  width: 50%;\n`\nconst RemoveAssetOverlay = styled.div`\n  position: absolute;\n  display: block;\n  right: -11px;\n  top: -11px;\n  z-index: 1;\n  transition: 250ms;\n  width: 45px;\n  height: 45px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nexport const RemoveAssetButton = ({ onClick }: { onClick: (e: MouseEvent<HTMLDivElement>) => void }) => (\n  <RemoveAssetOverlay onClick={onClick}>\n    <CircularCloseIcon />\n  </RemoveAssetOverlay>\n)\n\nconst NoContentContainer = () => (\n  <Box position=\"relative\" background=\"loadingBackground\" className={styles.bagRowImage}>\n    <Box\n      position=\"absolute\"\n      textAlign=\"center\"\n      left=\"1/2\"\n      top=\"1/2\"\n      style={{ transform: 'translate3d(-50%, -50%, 0)' }}\n      color=\"gray500\"\n      fontSize=\"12\"\n      fontWeight=\"normal\"\n    >\n      Image\n      <br />\n      not\n      <br />\n      available\n    </Box>\n  </Box>\n)\n\ninterface BagRowProps {\n  asset: UpdatedGenieAsset\n  usdPrice: number | undefined\n  removeAsset: (assets: GenieAsset[]) => void\n  showRemove?: boolean\n  grayscale?: boolean\n  isMobile: boolean\n}\n\nexport const BagRow = ({ asset, usdPrice, removeAsset, showRemove, grayscale, isMobile }: BagRowProps) => {\n  const [loadedImage, setImageLoaded] = useState(false)\n  const [noImageAvailable, setNoImageAvailable] = useState(!asset.smallImageUrl)\n\n  const [cardHovered, setCardHovered] = useState(false)\n  const handleMouseEnter = useCallback(() => setCardHovered(true), [])\n  const handleMouseLeave = useCallback(() => setCardHovered(false), [])\n  const showRemoveButton = Boolean(showRemove && cardHovered && !isMobile)\n\n  const assetEthPrice = asset.updatedPriceInfo ? asset.updatedPriceInfo.ETHPrice : asset.priceInfo.ETHPrice\n  const assetEthPriceFormatted = formatWeiToDecimal(assetEthPrice)\n  const assetUSDPriceFormatted = ethNumberStandardFormatter(\n    usdPrice ? parseFloat(formatEther(assetEthPrice)) * usdPrice : usdPrice,\n    true\n  )\n\n  const handleRemoveClick = useCallback(\n    (e: MouseEvent<HTMLElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      removeAsset([asset])\n    },\n    [asset, removeAsset]\n  )\n\n  return (\n    <Link to={getAssetHref(asset)} style={{ textDecoration: 'none' }}>\n      <Row className={styles.bagRow} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\n        <Box position=\"relative\" display=\"flex\">\n          {showRemove && isMobile && <RemoveAssetButton onClick={handleRemoveClick} />}\n          {!noImageAvailable && (\n            <Box\n              as=\"img\"\n              src={asset.smallImageUrl}\n              alt={asset.name}\n              className={clsx(styles.bagRowImage, grayscale && !cardHovered && styles.grayscaleImage)}\n              onLoad={() => {\n                setImageLoaded(true)\n              }}\n              onError={() => {\n                setNoImageAvailable(true)\n              }}\n              visibility={loadedImage ? 'visible' : 'hidden'}\n            />\n          )}\n          {!loadedImage && <Box position=\"absolute\" className={`${styles.bagRowImage} ${loadingBlock}`} />}\n          {noImageAvailable && <NoContentContainer />}\n        </Box>\n        <Column overflow=\"hidden\" width=\"full\" color={grayscale ? 'textSecondary' : 'textPrimary'}>\n          <Row overflow=\"hidden\" width=\"full\" whiteSpace=\"nowrap\">\n            <Box className={styles.assetName}>{asset.name ?? `#${asset.tokenId}`}</Box>\n            {asset.susFlag && <Suspicious />}\n          </Row>\n          <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\n            <Box className={styles.collectionName}>{asset.collectionName}</Box>\n            {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}\n          </Row>\n        </Column>\n        {showRemoveButton && (\n          <RemoveButton onClick={handleRemoveClick} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\n            Remove\n          </RemoveButton>\n        )}\n        {(!showRemoveButton || isMobile) && (\n          <Column flexShrink=\"0\" alignItems=\"flex-end\">\n            <Box className={styles.bagRowPrice}>\n              {assetEthPriceFormatted}\n              &nbsp;ETH\n            </Box>\n            <Box className={styles.collectionName}>{assetUSDPriceFormatted}</Box>\n          </Column>\n        )}\n      </Row>\n    </Link>\n  )\n}\n\ninterface PriceChangeBagRowProps {\n  asset: UpdatedGenieAsset\n  usdPrice: number | undefined\n  markAssetAsReviewed: (asset: UpdatedGenieAsset, toKeep: boolean) => void\n  top?: boolean\n  isMobile: boolean\n}\n\nexport const PriceChangeBagRow = ({ asset, usdPrice, markAssetAsReviewed, top, isMobile }: PriceChangeBagRowProps) => {\n  const isPriceIncrease = BigNumber.from(asset.updatedPriceInfo?.ETHPrice).gt(BigNumber.from(asset.priceInfo.ETHPrice))\n  const handleRemove = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      const toKeep = false\n      markAssetAsReviewed(asset, toKeep)\n    },\n    [asset, markAssetAsReviewed]\n  )\n  const handleKeep = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      const toKeep = true\n      markAssetAsReviewed(asset, toKeep)\n    },\n    [asset, markAssetAsReviewed]\n  )\n  return (\n    <Column className={styles.priceChangeColumn} borderTopColor={top ? 'backgroundOutline' : 'transparent'}>\n      <Row className={styles.priceChangeRow}>\n        {isPriceIncrease ? <SquareArrowUpIcon /> : <SquareArrowDownIcon />}\n        <Box>{`Price ${isPriceIncrease ? 'increased' : 'decreased'} from ${formatWeiToDecimal(\n          asset.priceInfo.ETHPrice\n        )} ETH`}</Box>\n      </Row>\n      <Box style={{ marginLeft: '-8px', marginRight: '-8px' }}>\n        <BagRow asset={asset} usdPrice={usdPrice} removeAsset={() => undefined} isMobile={isMobile} />\n      </Box>\n      <Row gap=\"8\" justifyContent=\"space-between\">\n        <ReviewButton onClick={handleRemove} emphasis={ButtonEmphasis.medium} size={ButtonSize.small}>\n          Remove\n        </ReviewButton>\n        <ReviewButton onClick={handleKeep} emphasis={ButtonEmphasis.high} size={ButtonSize.small}>\n          Keep\n        </ReviewButton>\n      </Row>\n    </Column>\n  )\n}\n\ninterface UnavailableAssetsHeaderRowProps {\n  assets?: UpdatedGenieAsset[]\n  usdPrice: number | undefined\n  clearUnavailableAssets: () => void\n  didOpenUnavailableAssets: boolean\n  setDidOpenUnavailableAssets: (didOpen: boolean) => void\n  isMobile: boolean\n}\n\ninterface UnavailableAssetsPreviewProps {\n  assets: UpdatedGenieAsset[]\n}\n\nconst ASSET_PREVIEW_WIDTH = 32\nconst ASSET_PREVIEW_OFFSET = 20\n\nconst UnavailableAssetsPreview = ({ assets }: UnavailableAssetsPreviewProps) => (\n  <Column\n    display=\"grid\"\n    style={{\n      gridTemplateColumns: `repeat(${assets.length}, 20px)`,\n      width: `${ASSET_PREVIEW_WIDTH + (assets.length - 1) * ASSET_PREVIEW_OFFSET}px`,\n    }}\n  >\n    {assets.map((asset, index) => (\n      <Box\n        key={`${asset.address}-${asset.tokenId}`}\n        as=\"img\"\n        src={asset.smallImageUrl}\n        width=\"32\"\n        height=\"32\"\n        borderStyle=\"solid\"\n        borderWidth=\"1px\"\n        borderColor=\"backgroundSurface\"\n        borderRadius=\"4\"\n        style={{ zIndex: index }}\n        className={styles.grayscaleImage}\n      />\n    ))}\n  </Column>\n)\n\nexport const UnavailableAssetsHeaderRow = ({\n  assets,\n  usdPrice,\n  clearUnavailableAssets,\n  didOpenUnavailableAssets,\n  setDidOpenUnavailableAssets,\n  isMobile,\n}: UnavailableAssetsHeaderRowProps) => {\n  const [isOpen, toggleOpen] = useReducer((s) => !s, false)\n  const timerLimit = 8\n  const [timeLeft, setTimeLeft] = useState(timerLimit)\n\n  useEffect(() => {\n    if (!timeLeft) {\n      if (!didOpenUnavailableAssets) {\n        clearUnavailableAssets()\n        setDidOpenUnavailableAssets(false)\n      }\n      return\n    }\n\n    const intervalId = setInterval(() => {\n      setTimeLeft(timeLeft - 1)\n    }, 1000)\n\n    return () => clearInterval(intervalId)\n  }, [timeLeft, clearUnavailableAssets, didOpenUnavailableAssets, setDidOpenUnavailableAssets])\n\n  if (!assets || assets.length === 0) return null\n\n  const moreThanOneUnavailable = assets.length > 1\n  const isShowingAssets = isOpen || !moreThanOneUnavailable\n\n  return (\n    <Column className={styles.unavailableAssetsContainer}>\n      <Column>\n        <Row\n          justifyContent=\"space-between\"\n          marginBottom={isShowingAssets ? '12' : '0'}\n          cursor={moreThanOneUnavailable ? 'pointer' : 'default'}\n          onClick={() => {\n            if (moreThanOneUnavailable) {\n              !didOpenUnavailableAssets && setDidOpenUnavailableAssets(true)\n              toggleOpen()\n            }\n          }}\n        >\n          <Row gap=\"12\" color=\"textSecondary\" className={bodySmall}>\n            {!isShowingAssets && <UnavailableAssetsPreview assets={assets.slice(0, 5)} />}\n            No longer available\n          </Row>\n          {moreThanOneUnavailable && (\n            <Row color=\"textSecondary\">{isOpen ? <ChevronUpBagIcon /> : <ChevronDownBagIcon />}</Row>\n          )}\n          {!didOpenUnavailableAssets && (\n            <Row\n              position=\"relative\"\n              width=\"20\"\n              height=\"20\"\n              color=\"textPrimary\"\n              justifyContent=\"center\"\n              cursor=\"pointer\"\n              onClick={clearUnavailableAssets}\n            >\n              <TimedLoader />\n              <CloseTimerIcon />\n            </Row>\n          )}\n        </Row>\n        <Column gap=\"8\" style={{ marginLeft: '-8px', marginRight: '-8px' }}>\n          {isShowingAssets &&\n            assets.map((asset) => (\n              <BagRow\n                key={asset.id}\n                asset={asset}\n                usdPrice={usdPrice}\n                removeAsset={() => undefined}\n                grayscale\n                isMobile={isMobile}\n              />\n            ))}\n        </Column>\n      </Column>\n    </Column>\n  )\n}\n","import { sendAnalyticsEvent, Trace } from '@uniswap/analytics'\nimport { NFTEventName } from '@uniswap/analytics-events'\nimport { BagRow, PriceChangeBagRow, UnavailableAssetsHeaderRow } from 'nft/components/bag/BagRow'\nimport { Column } from 'nft/components/Flex'\nimport { useBag, useIsMobile } from 'nft/hooks'\nimport { BagItemStatus, BagStatus } from 'nft/types'\nimport { fetchPrice, formatAssetEventProperties, recalculateBagUsingPooledAssets } from 'nft/utils'\nimport { useEffect, useMemo } from 'react'\nimport { useQuery } from 'react-query'\n\nexport const BagContent = () => {\n  const bagStatus = useBag((s) => s.bagStatus)\n  const setBagStatus = useBag((s) => s.setBagStatus)\n  const markAssetAsReviewed = useBag((s) => s.markAssetAsReviewed)\n  const didOpenUnavailableAssets = useBag((s) => s.didOpenUnavailableAssets)\n  const setDidOpenUnavailableAssets = useBag((s) => s.setDidOpenUnavailableAssets)\n  const uncheckedItemsInBag = useBag((s) => s.itemsInBag)\n  const setItemsInBag = useBag((s) => s.setItemsInBag)\n  const removeAssetsFromBag = useBag((s) => s.removeAssetsFromBag)\n\n  const isMobile = useIsMobile()\n\n  const itemsInBag = useMemo(() => {\n    return recalculateBagUsingPooledAssets(uncheckedItemsInBag)\n  }, [uncheckedItemsInBag])\n\n  const { data: fetchedPriceData } = useQuery(['fetchPrice', {}], () => fetchPrice(), {})\n\n  const { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems } = useMemo(() => {\n    const unchangedAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.ADDED_TO_BAG || item.status === BagItemStatus.REVIEWED)\n      .map((item) => item.asset)\n    const priceChangedAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.REVIEWING_PRICE_CHANGE)\n      .map((item) => item.asset)\n    const unavailableAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.UNAVAILABLE)\n      .map((item) => item.asset)\n    const availableItems = itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE)\n\n    return { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems }\n  }, [itemsInBag])\n\n  useEffect(() => {\n    const hasAssetsInReview = priceChangedAssets.length > 0\n    const hasAssets = itemsInBag.length > 0\n\n    if (hasAssetsInReview)\n      sendAnalyticsEvent(NFTEventName.NFT_BUY_BAG_CHANGED, {\n        usd_value: fetchedPriceData,\n        bag_quantity: itemsInBag,\n        ...formatAssetEventProperties(priceChangedAssets),\n      })\n\n    if (bagStatus === BagStatus.IN_REVIEW && !hasAssetsInReview) {\n      if (hasAssets) setBagStatus(BagStatus.CONFIRM_REVIEW)\n      else setBagStatus(BagStatus.ADDING_TO_BAG)\n    }\n\n    if (bagStatus === BagStatus.CONFIRM_REVIEW && !hasAssets) {\n      setBagStatus(BagStatus.ADDING_TO_BAG)\n    }\n  }, [bagStatus, itemsInBag, priceChangedAssets, setBagStatus, fetchedPriceData])\n\n  return (\n    <>\n      <Column display={priceChangedAssets.length > 0 || unavailableAssets.length > 0 ? 'flex' : 'none'}>\n        {unavailableAssets.length > 0 && (\n          <Trace\n            name={NFTEventName.NFT_BUY_BAG_CHANGED}\n            properties={{\n              usd_value: fetchedPriceData,\n              bag_quantity: itemsInBag.length,\n              ...formatAssetEventProperties(unavailableAssets),\n            }}\n            shouldLogImpression\n          >\n            <UnavailableAssetsHeaderRow\n              assets={unavailableAssets}\n              usdPrice={fetchedPriceData}\n              clearUnavailableAssets={() => setItemsInBag(availableItems)}\n              didOpenUnavailableAssets={didOpenUnavailableAssets}\n              setDidOpenUnavailableAssets={setDidOpenUnavailableAssets}\n              isMobile={isMobile}\n            />\n          </Trace>\n        )}\n        {priceChangedAssets.map((asset, index) => (\n          <PriceChangeBagRow\n            key={asset.id}\n            asset={asset}\n            usdPrice={fetchedPriceData}\n            markAssetAsReviewed={markAssetAsReviewed}\n            top={index === 0 && unavailableAssets.length === 0}\n            isMobile={isMobile}\n          />\n        ))}\n      </Column>\n      <Column>\n        {unchangedAssets\n          .slice(0)\n          .reverse()\n          .map((asset) => (\n            <BagRow\n              key={asset.id}\n              asset={asset}\n              usdPrice={fetchedPriceData}\n              removeAsset={removeAssetsFromBag}\n              showRemove={true}\n              isMobile={isMobile}\n            />\n          ))}\n      </Column>\n    </>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { OpacityHoverState } from 'components/Common'\nimport { BagCloseIcon } from 'nft/components/icons'\nimport { useMemo } from 'react'\nimport styled from 'styled-components/macro'\nimport { ButtonText, ThemedText } from 'theme'\n\nconst ClearButton = styled(ButtonText)`\n  color: ${({ theme }) => theme.textSecondary};\n  cursor: pointer;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 16px;\n\n  :active {\n    text-decoration: none;\n  }\n`\n\nconst IconWrapper = styled.button`\n  align-items: center;\n  background-color: transparent;\n  border-radius: 8px;\n  border: none;\n  color: ${({ theme }) => theme.textPrimary};\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  margin-left: auto;\n  padding: 2px;\n  opacity: 1;\n\n  ${OpacityHoverState}\n`\nconst CounterDot = styled.div<{ sizing: string }>`\n  align-items: center;\n  background-color: ${({ theme }) => theme.accentAction};\n  border-radius: 100px;\n  font-weight: bold;\n  color: ${({ theme }) => theme.accentTextLightPrimary};\n  display: flex;\n  font-size: 10px;\n  justify-content: center;\n  min-width: ${({ sizing }) => sizing};\n  min-height: ${({ sizing }) => sizing};\n  padding: 4px 6px;\n`\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  gap: 8px;\n  justify-content: flex-start;\n  margin: 16px 28px;\n  text-align: center;\n`\ninterface BagHeaderProps {\n  numberOfAssets: number\n  closeBag: () => void\n  resetFlow: () => void\n  isProfilePage: boolean\n}\n\nconst BASE_SIZING = 14\nconst INCREMENTAL_SIZING = 6\n\nconst getCircleSizing = (numberOfAssets: number): string => {\n  const numberOfCharacters = numberOfAssets.toString().length\n\n  // each digit adds 6px worth of width (approximately), so I set the height and width to be 6px larger for each digit added\n  // 1 digit => 14 + 6, 2 digit 14 + 12, etc.\n  return `${BASE_SIZING + INCREMENTAL_SIZING * numberOfCharacters}px`\n}\n\nexport const BagHeader = ({ numberOfAssets, closeBag, resetFlow, isProfilePage }: BagHeaderProps) => {\n  const sizing = useMemo(() => getCircleSizing(numberOfAssets), [numberOfAssets])\n\n  return (\n    <Wrapper>\n      <ThemedText.HeadlineSmall>{isProfilePage ? <Trans>Sell</Trans> : <Trans>Bag</Trans>}</ThemedText.HeadlineSmall>\n      {numberOfAssets > 0 && (\n        <>\n          <CounterDot sizing={sizing}>{numberOfAssets}</CounterDot>\n          <ClearButton onClick={resetFlow}>\n            <Trans>Clear all</Trans>\n          </ClearButton>\n        </>\n      )}\n      <IconWrapper onClick={closeBag}>\n        <BagCloseIcon data-testid=\"nft-bag-close-icon\" />\n      </IconWrapper>\n    </Wrapper>\n  )\n}\n","import { useIsNftProfilePage } from 'hooks/useIsNftPage'\nimport { Center, Column } from 'nft/components/Flex'\nimport { BagIcon, LargeTagIcon } from 'nft/components/icons'\nimport { subhead } from 'nft/css/common.css'\nimport { themeVars } from 'nft/css/sprinkles.css'\nimport styled from 'styled-components/macro'\n\nconst StyledColumn = styled(Column)`\n  gap: 12px;\n  margin-top: 68px;\n`\n\nconst EmptyState = () => {\n  const isProfilePage = useIsNftProfilePage()\n\n  return (\n    <StyledColumn>\n      <Center>\n        {isProfilePage ? (\n          <LargeTagIcon color={themeVars.colors.textTertiary} />\n        ) : (\n          <BagIcon color={themeVars.colors.textTertiary} height=\"96px\" width=\"96px\" strokeWidth=\"1px\" />\n        )}\n      </Center>\n      {isProfilePage ? (\n        <Center data-testid=\"nft-no-nfts-selected\" className={subhead}>\n          No NFTs selected\n        </Center>\n      ) : (\n        <Column gap=\"16\">\n          <Center data-testid=\"nft-empty-bag\" className={subhead} style={{ lineHeight: '24px' }}>\n            Your bag is empty\n          </Center>\n          <Center fontSize=\"12\" fontWeight=\"normal\" color=\"textSecondary\" style={{ lineHeight: '16px' }}>\n            Selected NFTs will appear here\n          </Center>\n        </Column>\n      )}\n    </StyledColumn>\n  )\n}\n\nexport default EmptyState\n","import { ButtonEmphasis, ButtonSize } from 'components/Button'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport { VerifiedIcon } from 'nft/components/icons'\nimport { useIsMobile, useSellAsset } from 'nft/hooks'\nimport { WalletAsset } from 'nft/types'\nimport { useState } from 'react'\n\nimport { RemoveAssetButton, RemoveButton } from '../BagRow'\nimport * as styles from '../BagRow.css'\n\nconst ProfileAssetRow = ({ asset }: { asset: WalletAsset }) => {\n  const removeAsset = useSellAsset((state) => state.removeSellAsset)\n  const isMobile = useIsMobile()\n  const [hovered, setHovered] = useState(false)\n  const handleHover = () => setHovered(!hovered)\n\n  const handleRemoveAsset: React.MouseEventHandler<HTMLElement> = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n    removeAsset(asset)\n  }\n\n  return (\n    <Row className={styles.bagRow} onMouseEnter={handleHover} onMouseLeave={handleHover}>\n      <Box position=\"relative\" display=\"flex\">\n        {isMobile && <RemoveAssetButton onClick={handleRemoveAsset} />}\n        <img src={asset.smallImageUrl} alt={asset.name} className={styles.bagRowImage} />\n      </Box>\n      <Column overflow=\"hidden\" width=\"full\" color=\"textPrimary\">\n        <Row overflow=\"hidden\" width=\"full\" justifyContent=\"space-between\" whiteSpace=\"nowrap\" gap=\"16\">\n          <Box className={styles.assetName}>{asset.name || `#${asset.tokenId}`}</Box>\n        </Row>\n        <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\n          <Box className={styles.collectionName}>{asset.asset_contract.name}</Box>\n          {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}\n        </Row>\n      </Column>\n      {hovered && !isMobile && (\n        <RemoveButton onClick={handleRemoveAsset} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\n          Remove\n        </RemoveButton>\n      )}\n    </Row>\n  )\n}\n\nexport default ProfileAssetRow\n","import { Column } from 'nft/components/Flex'\nimport { useSellAsset } from 'nft/hooks'\n\nimport ProfileAssetRow from './ProfileAssetRow'\n\nexport const ProfileBagContent = () => {\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  return (\n    <Column>\n      {sellAssets.length ? sellAssets.map((asset, index) => <ProfileAssetRow asset={asset} key={index} />) : null}\n    </Column>\n  )\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Trans } from '@lingui/macro'\nimport { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { NFTEventName } from '@uniswap/analytics-events'\nimport { useWeb3React } from '@web3-react/core'\nimport { GqlRoutingVariant, useGqlRoutingFlag } from 'featureFlags/flags/gqlRouting'\nimport { useNftRouteLazyQuery } from 'graphql/data/__generated__/types-and-hooks'\nimport { useIsNftDetailsPage, useIsNftPage, useIsNftProfilePage } from 'hooks/useIsNftPage'\nimport { BagFooter } from 'nft/components/bag/BagFooter'\nimport { Box } from 'nft/components/Box'\nimport { Portal } from 'nft/components/common/Portal'\nimport { Column } from 'nft/components/Flex'\nimport { Overlay } from 'nft/components/modals/Overlay'\nimport {\n  useBag,\n  useIsMobile,\n  useProfilePageState,\n  useSellAsset,\n  useSendTransaction,\n  useTransactionResponse,\n} from 'nft/hooks'\nimport { useTokenInput } from 'nft/hooks/useTokenInput'\nimport { fetchRoute } from 'nft/queries'\nimport { BagItemStatus, BagStatus, ProfilePageStateType, RouteResponse, TxStateType } from 'nft/types'\nimport {\n  buildNftTradeInputFromBagItems,\n  buildSellObject,\n  formatAssetEventProperties,\n  recalculateBagUsingPooledAssets,\n  sortUpdatedAssets,\n} from 'nft/utils'\nimport { buildRouteResponse } from 'nft/utils/nftRoute'\nimport { combineBuyItemsWithTxRoute } from 'nft/utils/txRoute/combineItemsWithTxRoute'\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { useQueryClient } from 'react-query'\nimport styled from 'styled-components/macro'\nimport { Z_INDEX } from 'theme/zIndex'\nimport { shallow } from 'zustand/shallow'\n\nimport * as styles from './Bag.css'\nimport { BagContent } from './BagContent'\nimport { BagHeader } from './BagHeader'\nimport EmptyState from './EmptyContent'\nimport { ProfileBagContent } from './profile/ProfileBagContent'\n\nexport const BAG_WIDTH = 320\nexport const XXXL_BAG_WIDTH = 360\n\ninterface SeparatorProps {\n  top?: boolean\n  show?: boolean\n}\n\nconst BagContainer = styled.div<{ raiseZIndex: boolean; isProfilePage: boolean }>`\n  position: fixed;\n  display: flex;\n  flex-direction: column;\n  top: 88px;\n  right: 20px;\n  width: ${BAG_WIDTH}px;\n  height: calc(100vh - 108px);\n  background: ${({ theme }) => theme.backgroundSurface};\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  border-radius: 16px;\n  box-shadow: ${({ theme }) => theme.shallowShadow};\n  z-index: ${({ raiseZIndex, isProfilePage }) =>\n    raiseZIndex ? (isProfilePage ? Z_INDEX.modalOverTooltip : Z_INDEX.modalBackdrop - 1) : 3};\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    right: 0px;\n    top: 0px;\n    width: 100%;\n    height: 100%;\n    border-radius: 0px;\n    border: none;\n  }\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.xxxl}px`}) {\n    width: ${XXXL_BAG_WIDTH}px;\n  }\n`\n\nconst DetailsPageBackground = styled.div`\n  position: fixed;\n  background: rgba(0, 0, 0, 0.7);\n  top: 0px;\n  width: 100%;\n  height: 100%;\n`\n\nconst ContinueButton = styled.div`\n  background: ${({ theme }) => theme.accentAction};\n  color: ${({ theme }) => theme.accentTextLightPrimary};\n  margin: 32px 28px 16px;\n  padding: 10px 0px;\n  border-radius: 12px;\n  text-align: center;\n  font-size: 16px;\n  font-weight: 600;\n  line-height: 20px;\n  cursor: pointer;\n  transition: ${({ theme }) => theme.transition.duration.medium};\n\n  :hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n`\n\nconst ScrollingIndicator = ({ top, show }: SeparatorProps) => (\n  <Box\n    marginX=\"24\"\n    borderWidth=\"1px\"\n    borderStyle=\"solid\"\n    borderColor=\"transparent\"\n    borderTopColor={top ? 'transparent' : 'backgroundOutline'}\n    borderBottomColor={top ? 'backgroundOutline' : 'transparent'}\n    opacity={show ? '1' : '0'}\n    transition=\"250\"\n  />\n)\n\nconst Bag = () => {\n  const { account, provider } = useWeb3React()\n\n  const { resetSellAssets, sellAssets } = useSellAsset(\n    ({ reset, sellAssets }) => ({\n      resetSellAssets: reset,\n      sellAssets,\n    }),\n    shallow\n  )\n\n  const { setProfilePageState } = useProfilePageState(({ setProfilePageState }) => ({ setProfilePageState }))\n\n  const {\n    bagStatus,\n    setBagStatus,\n    didOpenUnavailableAssets,\n    setDidOpenUnavailableAssets,\n    bagIsLocked,\n    setLocked,\n    reset,\n    setItemsInBag,\n    bagExpanded,\n    toggleBag,\n    setTotalEthPrice,\n    setBagExpanded,\n  } = useBag((state) => ({ ...state, bagIsLocked: state.isLocked, uncheckedItemsInBag: state.itemsInBag }), shallow)\n  const { uncheckedItemsInBag } = useBag(({ itemsInBag }) => ({ uncheckedItemsInBag: itemsInBag }))\n\n  const isProfilePage = useIsNftProfilePage()\n  const isDetailsPage = useIsNftDetailsPage()\n  const isNFTPage = useIsNftPage()\n  const isMobile = useIsMobile()\n  const usingGqlRouting = useGqlRoutingFlag() === GqlRoutingVariant.Enabled\n\n  const sendTransaction = useSendTransaction((state) => state.sendTransaction)\n  const transactionState = useSendTransaction((state) => state.state)\n  const setTransactionState = useSendTransaction((state) => state.setState)\n  const transactionStateRef = useRef(transactionState)\n  const [setTransactionResponse] = useTransactionResponse((state) => [state.setTransactionResponse])\n  const tokenTradeInput = useTokenInput((state) => state.tokenTradeInput)\n\n  const queryClient = useQueryClient()\n\n  const itemsInBag = useMemo(() => recalculateBagUsingPooledAssets(uncheckedItemsInBag), [uncheckedItemsInBag])\n\n  const [isModalOpen, setModalIsOpen] = useState(false)\n  const [userCanScroll, setUserCanScroll] = useState(false)\n  const [scrollProgress, setScrollProgress] = useState(0)\n  const scrollRef = (node: HTMLDivElement) => {\n    if (node !== null) {\n      const canScroll = node.scrollHeight > node.clientHeight\n      canScroll !== userCanScroll && setUserCanScroll(canScroll)\n    }\n  }\n\n  const { totalEthPrice } = useMemo(() => {\n    const totalEthPrice = itemsInBag.reduce(\n      (total, item) =>\n        item.status !== BagItemStatus.UNAVAILABLE\n          ? total.add(\n              BigNumber.from(\n                item.asset.updatedPriceInfo ? item.asset.updatedPriceInfo.ETHPrice : item.asset.priceInfo.ETHPrice\n              )\n            )\n          : total,\n      BigNumber.from(0)\n    )\n\n    return { totalEthPrice }\n  }, [itemsInBag])\n\n  const purchaseAssets = async (routingData: RouteResponse, purchasingWithErc20: boolean) => {\n    if (!provider || !routingData) return\n    const purchaseResponse = await sendTransaction(\n      provider?.getSigner(),\n      itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE).map((item) => item.asset),\n      routingData,\n      purchasingWithErc20\n    )\n    if (\n      purchaseResponse &&\n      (transactionStateRef.current === TxStateType.Success || transactionStateRef.current === TxStateType.Failed)\n    ) {\n      setLocked(false)\n      setModalIsOpen(false)\n      setTransactionResponse(purchaseResponse)\n      setBagExpanded({ bagExpanded: false })\n      reset()\n    }\n  }\n\n  const handleCloseBag = useCallback(() => {\n    setBagExpanded({ bagExpanded: false, manualClose: true })\n  }, [setBagExpanded])\n\n  const [fetchGqlRoute] = useNftRouteLazyQuery()\n\n  const fetchAssets = async () => {\n    const itemsToBuy = itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE).map((item) => item.asset)\n    const ethSellObject = buildSellObject(\n      itemsToBuy\n        .reduce((ethTotal, asset) => ethTotal.add(BigNumber.from(asset.priceInfo.ETHPrice)), BigNumber.from(0))\n        .toString()\n    )\n\n    didOpenUnavailableAssets && setDidOpenUnavailableAssets(false)\n    !bagIsLocked && setLocked(true)\n    setBagStatus(BagStatus.FETCHING_ROUTE)\n    try {\n      if (usingGqlRouting) {\n        fetchGqlRoute({\n          variables: {\n            senderAddress: usingGqlRouting && account ? account : '',\n            nftTrades: usingGqlRouting ? buildNftTradeInputFromBagItems(itemsInBag) : [],\n            tokenTrades: tokenTradeInput ? tokenTradeInput : undefined,\n          },\n          onCompleted: (data) => {\n            if (!data.nftRoute || !data.nftRoute.route) {\n              setBagStatus(BagStatus.ADDING_TO_BAG)\n              setLocked(false)\n              return\n            }\n\n            const purchasingWithErc20 = !!tokenTradeInput\n            const { route, routeResponse } = buildRouteResponse(data.nftRoute, purchasingWithErc20)\n\n            const { hasPriceAdjustment, updatedAssets } = combineBuyItemsWithTxRoute(itemsToBuy, route)\n            const shouldRefetchCalldata = hasPriceAdjustment && purchasingWithErc20\n\n            const fetchedPriceChangedAssets = updatedAssets\n              .filter((asset) => asset.updatedPriceInfo)\n              .sort(sortUpdatedAssets)\n            const fetchedUnavailableAssets = updatedAssets.filter((asset) => asset.isUnavailable)\n            const fetchedUnchangedAssets = updatedAssets.filter(\n              (asset) => !asset.updatedPriceInfo && !asset.isUnavailable\n            )\n            const hasReviewedAssets = fetchedUnchangedAssets.length > 0\n            const hasAssetsInReview = fetchedPriceChangedAssets.length > 0\n            const hasUnavailableAssets = fetchedUnavailableAssets.length > 0\n            const hasAssets = hasReviewedAssets || hasAssetsInReview || hasUnavailableAssets\n            const shouldReview = hasAssetsInReview || hasUnavailableAssets\n\n            setItemsInBag([\n              ...fetchedUnavailableAssets.map((unavailableAsset) => ({\n                asset: unavailableAsset,\n                status: BagItemStatus.UNAVAILABLE,\n              })),\n              ...fetchedPriceChangedAssets.map((changedAsset) => ({\n                asset: changedAsset,\n                status: BagItemStatus.REVIEWING_PRICE_CHANGE,\n              })),\n              ...fetchedUnchangedAssets.map((unchangedAsset) => ({\n                asset: unchangedAsset,\n                status: BagItemStatus.REVIEWED,\n              })),\n            ])\n\n            let shouldLock = false\n\n            if (hasAssets) {\n              if (!shouldReview) {\n                if (shouldRefetchCalldata) {\n                  setBagStatus(BagStatus.CONFIRM_QUOTE)\n                } else {\n                  purchaseAssets(routeResponse, purchasingWithErc20)\n                  setBagStatus(BagStatus.CONFIRMING_IN_WALLET)\n                  shouldLock = true\n                }\n              } else if (!hasAssetsInReview) setBagStatus(BagStatus.CONFIRM_REVIEW)\n              else {\n                setBagStatus(BagStatus.IN_REVIEW)\n              }\n            } else {\n              setBagStatus(BagStatus.ADDING_TO_BAG)\n            }\n\n            setLocked(shouldLock)\n          },\n        })\n      } else {\n        const routeData = await queryClient.fetchQuery(['assetsRoute', ethSellObject, itemsToBuy, account], () =>\n          fetchRoute({\n            toSell: [ethSellObject],\n            toBuy: itemsToBuy,\n            senderAddress: account ?? '',\n          })\n        )\n\n        const { updatedAssets } = combineBuyItemsWithTxRoute(itemsToBuy, routeData.route)\n\n        const fetchedPriceChangedAssets = updatedAssets\n          .filter((asset) => asset.updatedPriceInfo)\n          .sort(sortUpdatedAssets)\n        const fetchedUnavailableAssets = updatedAssets.filter((asset) => asset.isUnavailable)\n        const fetchedUnchangedAssets = updatedAssets.filter((asset) => !asset.updatedPriceInfo && !asset.isUnavailable)\n        const hasReviewedAssets = fetchedUnchangedAssets.length > 0\n        const hasAssetsInReview = fetchedPriceChangedAssets.length > 0\n        const hasUnavailableAssets = fetchedUnavailableAssets.length > 0\n        const hasAssets = hasReviewedAssets || hasAssetsInReview || hasUnavailableAssets\n        const shouldReview = hasAssetsInReview || hasUnavailableAssets\n\n        setItemsInBag([\n          ...fetchedUnavailableAssets.map((unavailableAsset) => ({\n            asset: unavailableAsset,\n            status: BagItemStatus.UNAVAILABLE,\n          })),\n          ...fetchedPriceChangedAssets.map((changedAsset) => ({\n            asset: changedAsset,\n            status: BagItemStatus.REVIEWING_PRICE_CHANGE,\n          })),\n          ...fetchedUnchangedAssets.map((unchangedAsset) => ({\n            asset: unchangedAsset,\n            status: BagItemStatus.REVIEWED,\n          })),\n        ])\n        setLocked(false)\n\n        if (hasAssets) {\n          if (!shouldReview) {\n            purchaseAssets(routeData, false)\n            setBagStatus(BagStatus.CONFIRMING_IN_WALLET)\n          } else if (!hasAssetsInReview) setBagStatus(BagStatus.CONFIRM_REVIEW)\n          else {\n            setBagStatus(BagStatus.IN_REVIEW)\n          }\n        } else {\n          setBagStatus(BagStatus.ADDING_TO_BAG)\n        }\n      }\n    } catch (error) {\n      setBagStatus(BagStatus.ADDING_TO_BAG)\n    }\n  }\n\n  useEffect(() => {\n    useSendTransaction.subscribe((state) => (transactionStateRef.current = state.state))\n  }, [])\n\n  useEffect(() => {\n    if (bagIsLocked && !isModalOpen) setModalIsOpen(true)\n  }, [bagIsLocked, isModalOpen])\n\n  useEffect(() => {\n    if (transactionStateRef.current === TxStateType.Confirming) setBagStatus(BagStatus.PROCESSING_TRANSACTION)\n    if (transactionStateRef.current === TxStateType.Denied || transactionStateRef.current === TxStateType.Invalid) {\n      if (transactionStateRef.current === TxStateType.Invalid) setBagStatus(BagStatus.WARNING)\n      else setBagStatus(BagStatus.CONFIRM_REVIEW)\n      setTransactionState(TxStateType.New)\n\n      setLocked(false)\n      setModalIsOpen(false)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [transactionStateRef.current])\n\n  useEffect(() => {\n    setTotalEthPrice(totalEthPrice)\n  }, [totalEthPrice, setTotalEthPrice])\n\n  const hasAssetsToShow = itemsInBag.length > 0\n\n  const scrollHandler = (event: React.UIEvent<HTMLDivElement>) => {\n    const scrollTop = event.currentTarget.scrollTop\n    const containerHeight = event.currentTarget.clientHeight\n    const scrollHeight = event.currentTarget.scrollHeight\n\n    setScrollProgress(scrollTop ? ((scrollTop + containerHeight) / scrollHeight) * 100 : 0)\n  }\n\n  const isBuyingAssets = itemsInBag.length > 0\n  const isSellingAssets = sellAssets.length > 0\n\n  const shouldRenderEmptyState = Boolean(\n    (!isProfilePage && !isBuyingAssets && bagStatus === BagStatus.ADDING_TO_BAG) || (isProfilePage && !isSellingAssets)\n  )\n\n  const eventProperties = useMemo(\n    () => ({\n      ...formatAssetEventProperties(itemsInBag.map((item) => item.asset)),\n    }),\n    [itemsInBag]\n  )\n\n  if (!bagExpanded || !isNFTPage) {\n    return null\n  }\n\n  return (\n    <Portal>\n      <BagContainer data-testid=\"nft-bag\" raiseZIndex={isMobile || isModalOpen} isProfilePage={isProfilePage}>\n        <BagHeader\n          numberOfAssets={isProfilePage ? sellAssets.length : itemsInBag.length}\n          closeBag={handleCloseBag}\n          resetFlow={isProfilePage ? resetSellAssets : reset}\n          isProfilePage={isProfilePage}\n        />\n        {shouldRenderEmptyState && <EmptyState />}\n        <ScrollingIndicator top show={userCanScroll && scrollProgress > 0} />\n        <Column ref={scrollRef} className={styles.assetsContainer} onScroll={scrollHandler} gap=\"12\">\n          {isProfilePage ? <ProfileBagContent /> : <BagContent />}\n        </Column>\n        {hasAssetsToShow && !isProfilePage && (\n          <BagFooter totalEthPrice={totalEthPrice} fetchAssets={fetchAssets} eventProperties={eventProperties} />\n        )}\n        {isSellingAssets && isProfilePage && (\n          <ContinueButton\n            onClick={() => {\n              toggleBag()\n              setProfilePageState(ProfilePageStateType.LISTING)\n              sendAnalyticsEvent(NFTEventName.NFT_PROFILE_PAGE_START_SELL, {\n                list_quantity: sellAssets.length,\n                collection_addresses: sellAssets.map((asset) => asset.asset_contract.address),\n                token_ids: sellAssets.map((asset) => asset.tokenId),\n              })\n            }}\n          >\n            <Trans>Continue</Trans>\n          </ContinueButton>\n        )}\n      </BagContainer>\n\n      {isDetailsPage ? (\n        <DetailsPageBackground onClick={toggleBag} />\n      ) : (\n        isModalOpen && <Overlay onClick={() => (!bagIsLocked ? setModalIsOpen(false) : undefined)} />\n      )}\n    </Portal>\n  )\n}\n\nexport default Bag\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/bag/Bag.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/Bag.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xamN6NTByMSB7CiAgc2Nyb2xsYmFyLXdpZHRoOiBub25lOwp9Ci5fMWpjejUwcjE6Oi13ZWJraXQtc2Nyb2xsYmFyIHsKICBkaXNwbGF5OiBub25lOwp9CkBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkgewogIC5fMWpjejUwcjMgewogICAgd2lkdGg6IDM2MHB4OwogICAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gNzJweCk7CiAgfQp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var assetsContainer = '_1jcz50r1 rgw6ez2dj rgw6ez2j1 rgw6ez1y7 rgw6ez7mf';\nexport var bagContainer = '_1jcz50r3 rgw6ez47v rgw6ez3e7 rgw6ez3i2 rgw6ez16v rgw6ez1dp rgw6ez38p rgw6ez4od rgw6ez79j rgw6ez501 rgw6ez7ir rgw6ez4dj';"],"sourceRoot":""}